------- FILE C:\Atari2600Dev\my_projects\Invader_Atari_2600_Basic\invader_16.bas.asm LEVEL 1 PASS 2
      1  3000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  3000 ????
      3  3000 ????				      processor	6502
------- FILE vcs.h LEVEL 2 PASS 2
      0  3000 ????				      include	"vcs.h"
      1  3000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  3000 ????
      3  3000 ????						; VCS.H
      4  3000 ????						; Version 1.05, 13/November/2003
      5  3000 ????
      6  3000 ????	       00 69	   VERSION_VCS =	105
      7  3000 ????
      8  3000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      9  3000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  3000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
     11  3000 ????						;
     12  3000 ????						; This file defines hardware registers and memory mapping for the
     13  3000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     14  3000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  3000 ????						; available at at http://www.atari2600.org/dasm
     16  3000 ????						;
     17  3000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     18  3000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     19  3000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     20  3000 ????						; with your views.  Please contribute, if you think you can improve this
     21  3000 ????						; file!
     22  3000 ????						;
     23  3000 ????						; Latest Revisions...
     24  3000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     25  3000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     26  3000 ????						;			    This will allow conditional code to verify VCS.H being
     27  3000 ????						;			    used for code assembly.
     28  3000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     29  3000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     30  3000 ????						;			 mirrored reading/writing differences.	This is more a 
     31  3000 ????						;			 readability issue, and binary compatibility with disassembled
     32  3000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     33  3000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     34  3000 ????						;			 which was broken by the use of segments in this file, as
     35  3000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     36  3000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     37  3000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     38  3000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     39  3000 ????						;						   it is safe to leave it undefined, and the base address will
     40  3000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     41  3000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     42  3000 ????						;			  - register definitions are now generated through assignment
     43  3000 ????						;			    in uninitialised segments.	This allows a changeable base
     44  3000 ????						;			    address architecture.
     45  3000 ????						; 1.0	22/MAR/2003		Initial release
     46  3000 ????
     47  3000 ????
     48  3000 ????						;-------------------------------------------------------------------------------
     49  3000 ????
     50  3000 ????						; TIA_BASE_ADDRESS
     51  3000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     52  3000 ????						; Normally 0, the base address should (externally, before including this file)
     53  3000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     54  3000 ????						; The reason is that this bankswitching scheme treats any access to locations
     55  3000 ????						; < $40 as a bankswitch.
     56  3000 ????
     57  3000 ????			  -	      IFNCONST	TIA_BASE_ADDRESS
     58  3000 ????			  -TIA_BASE_ADDRESS =	0
     59  3000 ????				      ENDIF
     60  3000 ????
     61  3000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     62  3000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     63  3000 ????						; *OR* by declaring the label before including this file, eg:
     64  3000 ????						; TIA_BASE_ADDRESS = $40
     65  3000 ????						;   include "vcs.h"
     66  3000 ????
     67  3000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     68  3000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     69  3000 ????						; for the mirrored ROM hardware registers.
     70  3000 ????
     71  3000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     72  3000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     73  3000 ????						; they defaut to the TIA_BASE_ADDRESS.
     74  3000 ????
     75  3000 ????			  -	      IFNCONST	TIA_BASE_READ_ADDRESS
     76  3000 ????			  -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     77  3000 ????				      ENDIF
     78  3000 ????
     79  3000 ????			  -	      IFNCONST	TIA_BASE_WRITE_ADDRESS
     80  3000 ????			  -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     81  3000 ????				      ENDIF
     82  3000 ????
     83  3000 ????						;-------------------------------------------------------------------------------
     84  3000 ????
     85 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     86 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     87 U0000
     88 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     89 U0000
     90 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     91 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     92 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     93 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     94 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     95 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     96 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     97 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     98 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     99 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
    100 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
    101 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    102 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    103 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    104 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    105 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    106 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    107 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    108 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    109 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    110 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    111 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    112 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    113 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    114 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    115 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    116 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    117 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    118 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    119 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    120 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    121 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    122 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    123 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    124 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    125 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    126 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    127 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    128 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    129 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    130 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    131 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    132 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    133 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    134 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    135 U002d
    136 U002d							;-------------------------------------------------------------------------------
    137 U002d
    138 U000e ????				      SEG.U	TIA_REGISTERS_READ
    139 U0000					      ORG	TIA_BASE_READ_ADDRESS
    140 U0000
    141 U0000							;											bit 7	 bit 6
    142 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    143 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    144 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    145 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    146 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    147 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    148 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    149 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    150 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    151 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    152 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    153 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    154 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    155 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    156 U000e
    157 U000e							;-------------------------------------------------------------------------------
    158 U000e
    159 U0298 ????				      SEG.U	RIOT
    160 U0280					      ORG	$280
    161 U0280
    162 U0280							; RIOT MEMORY MAP
    163 U0280
    164 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    165 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    166 U0281
    167 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    168 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    169 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    170 U0284		       00	   INTIM      ds	1	; $284		Timer output
    171 U0285
    172 U0285		       00	   TIMINT     ds	1	; $285
    173 U0286
    174 U0286							; Unused/undefined registers ($285-$294)
    175 U0286
    176 U0286		       00		      ds	1	; $286
    177 U0287		       00		      ds	1	; $287
    178 U0288		       00		      ds	1	; $288
    179 U0289		       00		      ds	1	; $289
    180 U028a		       00		      ds	1	; $28A
    181 U028b		       00		      ds	1	; $28B
    182 U028c		       00		      ds	1	; $28C
    183 U028d		       00		      ds	1	; $28D
    184 U028e		       00		      ds	1	; $28E
    185 U028f		       00		      ds	1	; $28F
    186 U0290		       00		      ds	1	; $290
    187 U0291		       00		      ds	1	; $291
    188 U0292		       00		      ds	1	; $292
    189 U0293		       00		      ds	1	; $293
    190 U0294
    191 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    192 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    193 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    194 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    195 U0298
    196 U0298							;-------------------------------------------------------------------------------
    197 U0298							; The following required for back-compatibility with code which does not use
    198 U0298							; segments.
    199 U0298
    200  3000 ????				      SEG
    201  3000 ????
    202  3000 ????						; EOF
------- FILE C:\Atari2600Dev\my_projects\Invader_Atari_2600_Basic\invader_16.bas.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  3000 ????				      include	"macro.h"
      1  3000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  3000 ????
      3  3000 ????						; MACRO.H
      4  3000 ????						; Version 1.05, 13/NOVEMBER/2003
      5  3000 ????
      6  3000 ????	       00 69	   VERSION_MACRO =	105
      7  3000 ????
      8  3000 ????						;
      9  3000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  3000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
     11  3000 ????						;
     12  3000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     13  3000 ????						; It is distributed as a companion machine-specific support package
     14  3000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  3000 ????						; available at at http://www.atari2600.org/dasm
     16  3000 ????						;
     17  3000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     18  3000 ????						; contents, or would like to add something, please write to me
     19  3000 ????						; (atari2600@taswegian.com) with your contribution.
     20  3000 ????						;
     21  3000 ????						; Latest Revisions...
     22  3000 ????						;
     23  3000 ????						; 1.05  14/NOV/2003	  - Added VERSION_MACRO equate (which will reflect 100x version #)
     24  3000 ????						;			    This will allow conditional code to verify MACRO.H being
     25  3000 ????						;			    used for code assembly.
     26  3000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     27  3000 ????						;
     28  3000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     29  3000 ????						;
     30  3000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     31  3000 ????						;			   (standardised macro for vertical synch code)
     32  3000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     33  3000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     34  3000 ????						; 1.0	22/MAR/2003		Initial release
     35  3000 ????
     36  3000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     37  3000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     38  3000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     39  3000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     40  3000 ????						;   registers and require them to be defined first).
     41  3000 ????
     42  3000 ????						; Available macros...
     43  3000 ????						;   SLEEP n		 - sleep for n cycles
     44  3000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     45  3000 ????						;   CLEAN_START	 - set machine to known state on startup
     46  3000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     47  3000 ????
     48  3000 ????						;-------------------------------------------------------------------------------
     49  3000 ????						; SLEEP duration
     50  3000 ????						; Original author: Thomas Jentzsch
     51  3000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     52  3000 ????						; useful for code where precise timing is required.
     53  3000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     54  3000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     55  3000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     56  3000 ????
     57  3000 ????				      MAC	sleep
     58  3000 ????			   .CYCLES    SET	{1}
     59  3000 ????
     60  3000 ????				      IF	.CYCLES < 2
     61  3000 ????				      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     62  3000 ????				      ERR
     63  3000 ????				      ENDIF
     64  3000 ????
     65  3000 ????				      IF	.CYCLES & 1
     66  3000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
     67  3000 ????				      nop	0
     68  3000 ????				      ELSE
     69  3000 ????				      bit	VSYNC
     70  3000 ????				      ENDIF
     71  3000 ????			   .CYCLES    SET	.CYCLES - 3
     72  3000 ????				      ENDIF
     73  3000 ????
     74  3000 ????				      REPEAT	.CYCLES / 2
     75  3000 ????				      nop
     76  3000 ????				      REPEND
     77  3000 ????				      ENDM		;usage: SLEEP n (n>1)
     78  3000 ????
     79  3000 ????						;-------------------------------------------------------------------------------
     80  3000 ????						; VERTICAL_SYNC
     81  3000 ????						; Original author: Manuel Polik
     82  3000 ????						; Inserts the code required for a proper 3 scannline 
     83  3000 ????						; vertical sync sequence
     84  3000 ????						;
     85  3000 ????						; Note: Alters the accumulator
     86  3000 ????						;
     87  3000 ????						; IN:
     88  3000 ????						; OUT: A = 1
     89  3000 ????
     90  3000 ????				      MAC	vertical_sync
     91  3000 ????				      LDA	#$02	; A = VSYNC enable
     92  3000 ????				      STA	WSYNC	; Finish current line
     93  3000 ????				      STA	VSYNC	; Start vertical sync
     94  3000 ????				      STA	WSYNC	; 1st line vertical sync
     95  3000 ????				      STA	WSYNC	; 2nd line vertical sync
     96  3000 ????				      LSR		; A = VSYNC disable
     97  3000 ????				      STA	WSYNC	; 3rd line vertical sync
     98  3000 ????				      STA	VSYNC	; Stop vertical sync
     99  3000 ????				      ENDM
    100  3000 ????
    101  3000 ????						;-------------------------------------------------------------------------------
    102  3000 ????						; CLEAN_START
    103  3000 ????						; Original author: Andrew Davie
    104  3000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    105  3000 ????						; Sets stack pointer to $FF, and all registers to 0
    106  3000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    107  3000 ????						; Use as very first section of code on boot (ie: at reset)
    108  3000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    109  3000 ????
    110  3000 ????				      MAC	clean_start
    111  3000 ????				      sei
    112  3000 ????				      cld
    113  3000 ????
    114  3000 ????				      ldx	#0
    115  3000 ????				      txa
    116  3000 ????				      tay
    117  3000 ????			   .CLEAR_STACK dex
    118  3000 ????				      txs
    119  3000 ????				      pha
    120  3000 ????				      bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  3000 ????
    122  3000 ????				      ENDM
    123  3000 ????
    124  3000 ????						;-------------------------------------------------------
    125  3000 ????						; SET_POINTER
    126  3000 ????						; Original author: Manuel Rotschkar
    127  3000 ????						;
    128  3000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  3000 ????						;
    130  3000 ????						; Usage: SET_POINTER pointer, address
    131  3000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  3000 ????						;
    133  3000 ????						; Note: Alters the accumulator, NZ flags
    134  3000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  3000 ????						; IN 2: absolute address
    136  3000 ????
    137  3000 ????				      MAC	set_pointer
    138  3000 ????			   .POINTER   SET	{1}
    139  3000 ????			   .ADDRESS   SET	{2}
    140  3000 ????
    141  3000 ????				      LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  3000 ????				      STA	.POINTER	; Store in pointer
    143  3000 ????				      LDA	#>.ADDRESS	; Get Hibyte of Address
    144  3000 ????				      STA	.POINTER+1	; Store in pointer+1
    145  3000 ????
    146  3000 ????				      ENDM
    147  3000 ????
    148  3000 ????						; EOF
------- FILE C:\Atari2600Dev\my_projects\Invader_Atari_2600_Basic\invader_16.bas.asm
------- FILE multisprite.h LEVEL 2 PASS 2
      0  3000 ????				      include	"multisprite.h"
      1  3000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  3000 ????
      3  3000 ????	       00 80	   missile0x  =	$80
      4  3000 ????	       00 81	   missile1x  =	$81
      5  3000 ????	       00 82	   ballx      =	$82
      6  3000 ????
      7  3000 ????						; multisprite stuff below - 5 bytes each starting with spritex
      8  3000 ????
      9  3000 ????	       00 83	   SpriteIndex =	$83
     10  3000 ????
     11  3000 ????	       00 84	   player0x   =	$84
     12  3000 ????	       00 85	   NewSpriteX =	$85	;		X position
     13  3000 ????	       00 85	   player1x   =	$85
     14  3000 ????	       00 86	   player2x   =	$86
     15  3000 ????	       00 87	   player3x   =	$87
     16  3000 ????	       00 88	   player4x   =	$88
     17  3000 ????	       00 89	   player5x   =	$89
     18  3000 ????
     19  3000 ????	       00 8a	   objecty    =	$8A
     20  3000 ????	       00 8a	   missile0y  =	$8A
     21  3000 ????	       00 8b	   missile1y  =	$8B
     22  3000 ????	       00 8c	   bally      =	$8C
     23  3000 ????
     24  3000 ????	       00 8d	   player0y   =	$8D
     25  3000 ????	       00 8e	   NewSpriteY =	$8E	;		Y position
     26  3000 ????	       00 8e	   player1y   =	$8E
     27  3000 ????	       00 8f	   player2y   =	$8F
     28  3000 ????	       00 90	   player3y   =	$90
     29  3000 ????	       00 91	   player4y   =	$91
     30  3000 ????	       00 92	   player5y   =	$92
     31  3000 ????
     32  3000 ????	       00 93	   NewNUSIZ   =	$93
     33  3000 ????	       00 93	   _NUSIZ1    =	$93
     34  3000 ????	       00 94	   NUSIZ2     =	$94
     35  3000 ????	       00 95	   NUSIZ3     =	$95
     36  3000 ????	       00 96	   NUSIZ4     =	$96
     37  3000 ????	       00 97	   NUSIZ5     =	$97
     38  3000 ????
     39  3000 ????	       00 98	   NewCOLUP1  =	$98
     40  3000 ????	       00 98	   _COLUP1    =	$98
     41  3000 ????	       00 99	   COLUP2     =	$99
     42  3000 ????	       00 9a	   COLUP3     =	$9A
     43  3000 ????	       00 9b	   COLUP4     =	$9B
     44  3000 ????	       00 9c	   COLUP5     =	$9C
     45  3000 ????
     46  3000 ????	       00 9d	   SpriteGfxIndex =	$9D
     47  3000 ????
     48  3000 ????	       00 a2	   player0pointer =	$A2
     49  3000 ????	       00 a2	   player0pointerlo =	$A2
     50  3000 ????	       00 a3	   player0pointerhi =	$A3
     51  3000 ????
     52  3000 ????						;P0Top = temp5
     53  3000 ????	       00 cf	   P0Top      =	$CF	; changed to hard value to avoid dasm issues
     54  3000 ????	       00 a4	   P0Bottom   =	$A4
     55  3000 ????	       00 a5	   P1Bottom   =	$A5
     56  3000 ????
     57  3000 ????	       00 a6	   player1pointerlo =	$A6
     58  3000 ????	       00 a7	   player2pointerlo =	$A7
     59  3000 ????	       00 a8	   player3pointerlo =	$A8
     60  3000 ????	       00 a9	   player4pointerlo =	$A9
     61  3000 ????	       00 aa	   player5pointerlo =	$AA
     62  3000 ????
     63  3000 ????	       00 ab	   player1pointerhi =	$AB
     64  3000 ????	       00 ac	   player2pointerhi =	$AC
     65  3000 ????	       00 ad	   player3pointerhi =	$AD
     66  3000 ????	       00 ae	   player4pointerhi =	$AE
     67  3000 ????	       00 af	   player5pointerhi =	$AF
     68  3000 ????
     69  3000 ????	       00 b0	   player0height =	$B0
     70  3000 ????	       00 b1	   spriteheight =	$B1	; heights of multiplexed player sprite
     71  3000 ????	       00 b1	   player1height =	$B1
     72  3000 ????	       00 b2	   player2height =	$B2
     73  3000 ????	       00 b3	   player3height =	$B3
     74  3000 ????	       00 b4	   player4height =	$B4
     75  3000 ????	       00 b5	   player5height =	$B5
     76  3000 ????
     77  3000 ????	       00 b6	   PF1temp1   =	$B6
     78  3000 ????	       00 b7	   PF1temp2   =	$B7
     79  3000 ????	       00 b8	   PF2temp1   =	$B8
     80  3000 ????	       00 b9	   PF2temp2   =	$B9
     81  3000 ????
     82  3000 ????	       00 ba	   pfpixelheight =	$BA
     83  3000 ????
     84  3000 ????						; playfield is now a pointer to graphics
     85  3000 ????	       00 bb	   playfield  =	$BB
     86  3000 ????	       00 bb	   PF1pointer =	$BB
     87  3000 ????
     88  3000 ????	       00 bd	   PF2pointer =	$BD
     89  3000 ????
     90  3000 ????	       00 bf	   statusbarlength =	$BF
     91  3000 ????	       00 bf	   aux3       =	$BF
     92  3000 ????
     93  3000 ????	       00 c0	   lifecolor  =	$C0
     94  3000 ????	       00 c0	   pfscorecolor =	$C0
     95  3000 ????	       00 c0	   aux4       =	$C0
     96  3000 ????
     97  3000 ????						;P1display = temp2 ; temp2 and temp3
     98  3000 ????	       00 cc	   P1display  =	$cc	; changed to hard value to avoid dasm issues
     99  3000 ????	       00 c1	   lifepointer =	$c1
    100  3000 ????	       00 c2	   lives      =	$c2
    101  3000 ????	       00 c1	   pfscore1   =	$c1
    102  3000 ????	       00 c2	   pfscore2   =	$c2
    103  3000 ????	       00 c1	   aux5       =	$c1
    104  3000 ????	       00 c2	   aux6       =	$c2
    105  3000 ????
    106  3000 ????	       00 c3	   playfieldpos =	$C3
    107  3000 ????
    108  3000 ????						;RepoLine = temp4
    109  3000 ????	       00 ce	   RepoLine   =	$ce	; changed to hard value to avoid dasm issues
    110  3000 ????
    111  3000 ????	       00 c4	   pfheight   =	$C4
    112  3000 ????	       00 c5	   scorepointers =	$C5
    113  3000 ????
    114  3000 ????	       00 cb	   temp1      =	$CB	;used by kernel.  can be used in program too, but
    115  3000 ????	       00 cc	   temp2      =	$CC	;are obliterated when drawscreen is called.
    116  3000 ????	       00 cd	   temp3      =	$CD
    117  3000 ????	       00 ce	   temp4      =	$CE
    118  3000 ????	       00 cf	   temp5      =	$CF
    119  3000 ????	       00 d0	   temp6      =	$D0
    120  3000 ????	       00 d1	   temp7      =	$D1	; This is used to aid in bankswitching
    121  3000 ????
    122  3000 ????	       00 d2	   score      =	$D2
    123  3000 ????	       00 d5	   scorecolor =	$D5	;need to find other places for these, possibly...
    124  3000 ????	       00 d6	   rand       =	$D6
    125  3000 ????
    126  3000 ????
    127  3000 ????
    128  3000 ????	       00 d7	   A	      =	$d7
    129  3000 ????	       00 d7	   a	      =	$d7
    130  3000 ????	       00 d8	   B	      =	$d8
    131  3000 ????	       00 d8	   b	      =	$d8
    132  3000 ????	       00 d9	   C	      =	$d9
    133  3000 ????	       00 d9	   c	      =	$d9
    134  3000 ????	       00 da	   D	      =	$da
    135  3000 ????	       00 da	   d	      =	$da
    136  3000 ????	       00 db	   E	      =	$db
    137  3000 ????	       00 db	   e	      =	$db
    138  3000 ????	       00 dc	   F	      =	$dc
    139  3000 ????	       00 dc	   f	      =	$dc
    140  3000 ????	       00 dd	   G	      =	$dd
    141  3000 ????	       00 dd	   g	      =	$dd
    142  3000 ????	       00 de	   H	      =	$de
    143  3000 ????	       00 de	   h	      =	$de
    144  3000 ????	       00 df	   I	      =	$df
    145  3000 ????	       00 df	   i	      =	$df
    146  3000 ????	       00 e0	   J	      =	$e0
    147  3000 ????	       00 e0	   j	      =	$e0
    148  3000 ????	       00 e1	   K	      =	$e1
    149  3000 ????	       00 e1	   k	      =	$e1
    150  3000 ????	       00 e2	   L	      =	$e2
    151  3000 ????	       00 e2	   l	      =	$e2
    152  3000 ????	       00 e3	   M	      =	$e3
    153  3000 ????	       00 e3	   m	      =	$e3
    154  3000 ????	       00 e4	   N	      =	$e4
    155  3000 ????	       00 e4	   n	      =	$e4
    156  3000 ????	       00 e5	   O	      =	$e5
    157  3000 ????	       00 e5	   o	      =	$e5
    158  3000 ????	       00 e6	   P	      =	$e6
    159  3000 ????	       00 e6	   p	      =	$e6
    160  3000 ????	       00 e7	   Q	      =	$e7
    161  3000 ????	       00 e7	   q	      =	$e7
    162  3000 ????	       00 e8	   R	      =	$e8
    163  3000 ????	       00 e8	   r	      =	$e8
    164  3000 ????	       00 e9	   S	      =	$e9
    165  3000 ????	       00 e9	   s	      =	$e9
    166  3000 ????	       00 ea	   T	      =	$ea
    167  3000 ????	       00 ea	   t	      =	$ea
    168  3000 ????	       00 eb	   U	      =	$eb
    169  3000 ????	       00 eb	   u	      =	$eb
    170  3000 ????	       00 ec	   V	      =	$ec
    171  3000 ????	       00 ec	   v	      =	$ec
    172  3000 ????	       00 ed	   W	      =	$ed
    173  3000 ????	       00 ed	   w	      =	$ed
    174  3000 ????	       00 ee	   X	      =	$ee
    175  3000 ????	       00 ee	   x	      =	$ee
    176  3000 ????	       00 ef	   Y	      =	$ef
    177  3000 ????	       00 ef	   y	      =	$ef
    178  3000 ????	       00 f0	   Z	      =	$f0
    179  3000 ????	       00 f0	   z	      =	$f0
    180  3000 ????
    181  3000 ????	       00 f1	   spritesort =	$f1	; helps with flickersort
    182  3000 ????	       00 f2	   spritesort2 =	$f2	; helps with flickersort
    183  3000 ????	       00 f3	   spritesort3 =	$f3
    184  3000 ????	       00 f4	   spritesort4 =	$f4
    185  3000 ????	       00 f5	   spritesort5 =	$f5
    186  3000 ????
    187  3000 ????	       00 f6	   stack1     =	$f6
    188  3000 ????	       00 f7	   stack2     =	$f7
    189  3000 ????	       00 f8	   stack3     =	$f8
    190  3000 ????	       00 f9	   stack4     =	$f9
    191  3000 ????						; the stack bytes above may be used in the kernel
    192  3000 ????						; stack = F6-F7, F8-F9, FA-FB, FC-FD, FE-FF
    193  3000 ????
    194  3000 ????				      MAC	return
    195  3000 ????				      ifnconst	bankswitch
    196  3000 ????				      rts
    197  3000 ????				      else
    198  3000 ????				      jmp	BS_return
    199  3000 ????				      endif
    200  3000 ????				      ENDM		; auto-return from either a regular or bankswitched module
------- FILE C:\Atari2600Dev\my_projects\Invader_Atari_2600_Basic\invader_16.bas.asm
------- FILE 2600basic_variable_redefs.h LEVEL 2 PASS 2
      0  3000 ????				      include	"2600basic_variable_redefs.h"
      1  3000 ????						; This file contains variable mapping and other information for the current project.
      2  3000 ????
      3  3000 ????	       00 20	   bscode_length =	32
      4  3000 ????	       00 e3	   tur_fired  =	m
      5  3000 ????	       00 e0	   shot_y     =	j
      6  3000 ????	       00 df	   shot_x     =	i
      7  3000 ????	       00 db	   tur_y      =	e
      8  3000 ????	       00 da	   tur_x      =	d
      9  3000 ????	       00 e5	   inv_blast_delay =	o
     10  3000 ????	       00 e4	   inv_hit    =	n
     11  3000 ????	       00 e2	   inv_fired  =	l
     12  3000 ????	       00 e1	   inv_fire_delay =	k
     13  3000 ????	       00 de	   inv_shot_y =	h
     14  3000 ????	       00 dd	   inv_shot_x =	g
     15  3000 ????	       00 dc	   inv_dir    =	f
     16  3000 ????	       00 d9	   inv_delay  =	c
     17  3000 ????	       00 d8	   inv_y      =	b
     18  3000 ????	       00 d7	   inv_x      =	a
     19  3000 ????	       00 d4	   _sc3       =	score + 2
     20  3000 ????
     21  3000 ????	       00 01	   bs_mask    =	1
     22  3000 ????	       00 08	   bankswitch =	8
     23  3000 ????	       1f f8	   bankswitch_hotspot =	$1FF8
     24  3000 ????	       00 01	   multisprite =	1
     25  3000 ????	       00 01	   no_blank_lines =	1
------- FILE C:\Atari2600Dev\my_projects\Invader_Atari_2600_Basic\invader_16.bas.asm
      8  3000 ????				      ifconst	bankswitch
      9  3000 ????				      if	bankswitch == 8
     10  1000					      ORG	$1000
     11  1000					      RORG	$D000
     12  1000					      endif
     13  1000				  -	      if	bankswitch == 16
     14  1000				  -	      ORG	$1000
     15  1000				  -	      RORG	$9000
     16  1000					      endif
     17  1000				  -	      if	bankswitch == 32
     18  1000				  -	      ORG	$1000
     19  1000				  -	      RORG	$1000
     20  1000					      endif
     21  1000				  -	      if	bankswitch == 64
     22  1000				  -	      ORG	$1000
     23  1000				  -	      RORG	$1000
     24  1000					      endif
     25  1000				  -	      else
     26  1000				  -	      ORG	$F000
     27  1000					      endif
     28  1000
     29  1000					      ifconst	bankswitch_hotspot
     30  1000				  -	      if	bankswitch_hotspot = $083F	; 0840 bankswitching hotspot
     31  1000				  -	      .byte	234	; stop unexpected bankswitches
     32  1000					      endif
     33  1000					      endif
     34  1000				   game
     35  1000				   .
     36  1000							; 
     37  1000
     38  1000				   .
     39  1000							; 
     40  1000
     41  1000				   .
     42  1000							; 
     43  1000
     44  1000				   .
     45  1000							; 
     46  1000
     47  1000				   .
     48  1000							; 
     49  1000
     50  1000				   .
     51  1000							; 
     52  1000
     53  1000				   .
     54  1000							; 
     55  1000
     56  1000				   .L00 		;  includesfile multisprite_bankswitch.inc
     57  1000
     58  1000				   .L01 		;  set kernel_options no_blank_lines
     59  1000
     60  1000				   .
     61  1000							; 
     62  1000
     63  1000				   .L02 		;  set kernel multisprite
     64  1000
     65  1000				   .L03 		;  set romsize 8k
     66  1000
     67  1000				   .
     68  1000							; 
     69  1000
     70  1000				   .
     71  1000							; 
     72  1000
     73  1000				   .
     74  1000							; 
     75  1000
     76  1000				   .L04 		;  scorecolor	=  14
     77  1000
     78  1000		       a9 0e		      LDA	#14
     79  1002		       85 d5		      STA	scorecolor
     80  1004				   .
     81  1004							; 
     82  1004
     83  1004				   .L05 		;  dim _sc3  =  score + 2
     84  1004
     85  1004				   .
     86  1004							; 
     87  1004
     88  1004				   .
     89  1004							; 
     90  1004
     91  1004				   .L06 		;  dim inv_x  =  a  :	a  =  84
     92  1004
     93  1004		       a9 54		      LDA	#84
     94  1006		       85 d7		      STA	a
     95  1008				   .L07 		;  dim inv_y  =  b  :	b  =  76
     96  1008
     97  1008		       a9 4c		      LDA	#76
     98  100a		       85 d8		      STA	b
     99  100c				   .L08 		;  dim inv_delay  =  c  :  c  =  0
    100  100c
    101  100c		       a9 00		      LDA	#0
    102  100e		       85 d9		      STA	c
    103  1010				   .L09 		;  dim inv_dir  =  f  :  f  =	1
    104  1010
    105  1010		       a9 01		      LDA	#1
    106  1012		       85 dc		      STA	f
    107  1014				   .L010		;  dim inv_shot_x  =  g  :  g	=  0
    108  1014
    109  1014		       a9 00		      LDA	#0
    110  1016		       85 dd		      STA	g
    111  1018				   .L011		;  dim inv_shot_y  =  h  :  h	=  0
    112  1018
    113  1018		       a9 00		      LDA	#0
    114  101a		       85 de		      STA	h
    115  101c				   .L012		;  dim inv_fire_delay	=  k  :  k  =  0
    116  101c
    117  101c		       a9 00		      LDA	#0
    118  101e		       85 e1		      STA	k
    119  1020				   .L013		;  dim inv_fired  =  l  :  l  =  0
    120  1020
    121  1020		       a9 00		      LDA	#0
    122  1022		       85 e2		      STA	l
    123  1024				   .L014		;  dim inv_hit  =  n  :  n  =	0
    124  1024
    125  1024		       a9 00		      LDA	#0
    126  1026		       85 e4		      STA	n
    127  1028				   .L015		;  dim inv_blast_delay  =  o  :  o  =	0
    128  1028
    129  1028		       a9 00		      LDA	#0
    130  102a		       85 e5		      STA	o
    131  102c				   .
    132  102c							; 
    133  102c
    134  102c				   .
    135  102c							; 
    136  102c
    137  102c				   .L016		;  dim tur_x  =  d  :	d  =  84
    138  102c
    139  102c		       a9 54		      LDA	#84
    140  102e		       85 da		      STA	d
    141  1030				   .L017		;  dim tur_y  =  e  :	e  =  14
    142  1030
    143  1030		       a9 0e		      LDA	#14
    144  1032		       85 db		      STA	e
    145  1034				   .L018		;  dim shot_x	=  i  :  i  =  tur_x
    146  1034
    147  1034		       a5 da		      LDA	tur_x
    148  1036		       85 df		      STA	i
    149  1038				   .L019		;  dim shot_y	=  j  :  j  =  tur_y
    150  1038
    151  1038		       a5 db		      LDA	tur_y
    152  103a		       85 e0		      STA	j
    153  103c				   .L020		;  dim tur_fired  =  m  :  m  =  0
    154  103c
    155  103c		       a9 00		      LDA	#0
    156  103e		       85 e3		      STA	m
    157  1040				   .
    158  1040							; 
    159  1040
    160  1040				   .
    161  1040							; 
    162  1040
    163  1040				   .
    164  1040							; 
    165  1040
    166  1040				   .main
    167  1040							; main
    168  1040
    169  1040				   .
    170  1040							; 
    171  1040
    172  1040				   .L021		;  gosub draw__move_turret
    173  1040
    174  1040		       20 73 d2 	      jsr	.draw__move_turret
    175  1043
    176  1043				   .L022		;  gosub draw__move_turret_shot
    177  1043
    178  1043		       20 b2 d2 	      jsr	.draw__move_turret_shot
    179  1046
    180  1046				   .L023		;  gosub draw__move_invader
    181  1046
    182  1046		       20 73 d0 	      jsr	.draw__move_invader
    183  1049
    184  1049				   .L024		;  gosub draw__move_inv_shot
    185  1049
    186  1049		       20 45 d1 	      jsr	.draw__move_inv_shot
    187  104c
    188  104c				   .L025		;  gosub col_shot_inv
    189  104c
    190  104c		       20 c4 d1 	      jsr	.col_shot_inv
    191  104f
    192  104f				   .
    193  104f							; 
    194  104f
    195  104f				   .L026		;  if _sc3  >=  70 then goto game_over
    196  104f
    197  104f		       a5 d4		      LDA	_sc3
    198  1051		       c9 46		      CMP	#70
    199  1053		       90 03		      BCC	.skipL026
    200  1055				   .condpart0
    201  1055		       4c 19 d3 	      jmp	.game_over
    202  1058
    203  1058				   .skipL026
    204  1058				   .
    205  1058							; 
    206  1058
    207  1058				   .L027		;  drawscreen
    208  1058
    209  1058		       85 d1		      sta	temp7
    210  105a		       a9 d0		      lda	#>(ret_point1-1)
    211  105c		       48		      pha
    212  105d		       a9 6f		      lda	#<(ret_point1-1)
    213  105f		       48		      pha
    214  1060		       a9 f0		      lda	#>(drawscreen-1)
    215  1062		       48		      pha
    216  1063		       a9 39		      lda	#<(drawscreen-1)
    217  1065		       48		      pha
    218  1066		       a5 d1		      lda	temp7
    219  1068		       48		      pha
    220  1069		       8a		      txa
    221  106a		       48		      pha
    222  106b		       a2 02		      ldx	#2
    223  106d		       4c eb ff 	      jmp	BS_jsr
    224  1070				   ret_point1
    225  1070				   .
    226  1070							; 
    227  1070
    228  1070				   .L028		;  goto main
    229  1070
    230  1070		       4c 40 d0 	      jmp	.main
    231  1073
    232  1073				   .
    233  1073							; 
    234  1073
    235  1073				   .
    236  1073							; 
    237  1073
    238  1073				   .
    239  1073							; 
    240  1073
    241  1073				   .
    242  1073							; 
    243  1073
    244  1073				   .
    245  1073							; 
    246  1073
    247  1073				   .
    248  1073							; 
    249  1073
    250  1073				   .
    251  1073							; 
    252  1073
    253  1073				   .draw__move_invader
    254  1073							; draw__move_invader
    255  1073
    256  1073				   .
    257  1073							; 
    258  1073
    259  1073				   .L029		;  inv_delay  =  inv_delay  +	1
    260  1073
    261  1073		       e6 d9		      INC	inv_delay
    262  1075				   .
    263  1075							; 
    264  1075
    265  1075				   .
    266  1075							; 
    267  1075
    268  1075				   .L030		;  if inv_delay  =  15  &&  inv_hit  =  0 then player0:  
    269  1075
    270  1075		       a5 d9		      LDA	inv_delay
    271  1077		       c9 0f		      CMP	#15
    272  1079		       d0 12		      BNE	.skipL030
    273  107b				   .condpart1
    274  107b		       a5 e4		      LDA	inv_hit
    275  107d		       c9 00		      CMP	#0
    276  107f		       d0 0c		      BNE	.skip1then
    277  1081				   .condpart2
    278  1081		       a2 5a		      LDX	#<player2then_0
    279  1083		       86 a2		      STX	player0pointerlo
    280  1085		       a9 f4		      LDA	#>player2then_0
    281  1087		       85 a3		      STA	player0pointerhi
    282  1089		       a9 09		      LDA	#9
    283  108b		       85 b0		      STA	player0height
    284  108d				   .skip1then
    285  108d				   .skipL030
    286  108d				   .
    287  108d							; 
    288  108d
    289  108d				   .
    290  108d							; 
    291  108d
    292  108d				   .L031		;  if inv_delay  =  30  &&  inv_hit  =  0 then player0:  
    293  108d
    294  108d		       a5 d9		      LDA	inv_delay
    295  108f		       c9 1e		      CMP	#30
    296  1091		       d0 12		      BNE	.skipL031
    297  1093				   .condpart3
    298  1093		       a5 e4		      LDA	inv_hit
    299  1095		       c9 00		      CMP	#0
    300  1097		       d0 0c		      BNE	.skip3then
    301  1099				   .condpart4
    302  1099		       a2 63		      LDX	#<player4then_0
    303  109b		       86 a2		      STX	player0pointerlo
    304  109d		       a9 f4		      LDA	#>player4then_0
    305  109f		       85 a3		      STA	player0pointerhi
    306  10a1		       a9 09		      LDA	#9
    307  10a3		       85 b0		      STA	player0height
    308  10a5				   .skip3then
    309  10a5				   .skipL031
    310  10a5				   .
    311  10a5							; 
    312  10a5
    313  10a5				   .L032		;  if inv_delay  >  30 then inv_delay	=  0
    314  10a5
    315  10a5		       a9 1e		      LDA	#30
    316  10a7		       c5 d9		      CMP	inv_delay
    317  10a9		       b0 04		      BCS	.skipL032
    318  10ab				   .condpart5
    319  10ab		       a9 00		      LDA	#0
    320  10ad		       85 d9		      STA	inv_delay
    321  10af				   .skipL032
    322  10af				   .
    323  10af							; 
    324  10af
    325  10af				   .
    326  10af							; 
    327  10af
    328  10af				   .L033		;  COLUP0  =  52
    329  10af
    330  10af		       a9 34		      LDA	#52
    331  10b1		       85 06		      STA	COLUP0
    332  10b3				   .
    333  10b3							; 
    334  10b3
    335  10b3				   .
    336  10b3							; 
    337  10b3
    338  10b3				   .L034		;  if inv_hit	=  0  &&  inv_dir  =  1  &&  inv_delay	=  15 then inv_x  =  inv_x  +  1
    339  10b3
    340  10b3		       a5 e4		      LDA	inv_hit
    341  10b5		       c9 00		      CMP	#0
    342  10b7		       d0 0e		      BNE	.skipL034
    343  10b9				   .condpart6
    344  10b9		       a5 dc		      LDA	inv_dir
    345  10bb		       c9 01		      CMP	#1
    346  10bd		       d0 08		      BNE	.skip6then
    347  10bf				   .condpart7
    348  10bf		       a5 d9		      LDA	inv_delay
    349  10c1		       c9 0f		      CMP	#15
    350  10c3		       d0 02		      BNE	.skip7then
    351  10c5				   .condpart8
    352  10c5		       e6 d7		      INC	inv_x
    353  10c7				   .skip7then
    354  10c7				   .skip6then
    355  10c7				   .skipL034
    356  10c7				   .L035		;  if inv_hit	=  0  &&  inv_dir  =  1  &&  inv_delay	=  30 then inv_x  =  inv_x  +  1
    357  10c7
    358  10c7		       a5 e4		      LDA	inv_hit
    359  10c9		       c9 00		      CMP	#0
    360  10cb		       d0 0e		      BNE	.skipL035
    361  10cd				   .condpart9
    362  10cd		       a5 dc		      LDA	inv_dir
    363  10cf		       c9 01		      CMP	#1
    364  10d1		       d0 08		      BNE	.skip9then
    365  10d3				   .condpart10
    366  10d3		       a5 d9		      LDA	inv_delay
    367  10d5		       c9 1e		      CMP	#30
    368  10d7		       d0 02		      BNE	.skip10then
    369  10d9				   .condpart11
    370  10d9		       e6 d7		      INC	inv_x
    371  10db				   .skip10then
    372  10db				   .skip9then
    373  10db				   .skipL035
    374  10db				   .
    375  10db							; 
    376  10db
    377  10db				   .L036		;  if inv_x  >  143 then inv_dir  =  0  :  inv_x  =  143  :  inv_y  =	inv_y  -  5
    378  10db
    379  10db		       a9 8f		      LDA	#143
    380  10dd		       c5 d7		      CMP	inv_x
    381  10df		       b0 0f		      BCS	.skipL036
    382  10e1				   .condpart12
    383  10e1		       a9 00		      LDA	#0
    384  10e3		       85 dc		      STA	inv_dir
    385  10e5		       a9 8f		      LDA	#143
    386  10e7		       85 d7		      STA	inv_x
    387  10e9		       a5 d8		      LDA	inv_y
    388  10eb		       38		      SEC
    389  10ec		       e9 05		      SBC	#5
    390  10ee		       85 d8		      STA	inv_y
    391  10f0				   .skipL036
    392  10f0				   .
    393  10f0							; 
    394  10f0
    395  10f0				   .
    396  10f0							; 
    397  10f0
    398  10f0				   .L037		;  if inv_hit	=  0  &&  inv_dir  =  0  &&  inv_delay	=  15 then inv_x  =  inv_x  -  1
    399  10f0
    400  10f0		       a5 e4		      LDA	inv_hit
    401  10f2		       c9 00		      CMP	#0
    402  10f4		       d0 0e		      BNE	.skipL037
    403  10f6				   .condpart13
    404  10f6		       a5 dc		      LDA	inv_dir
    405  10f8		       c9 00		      CMP	#0
    406  10fa		       d0 08		      BNE	.skip13then
    407  10fc				   .condpart14
    408  10fc		       a5 d9		      LDA	inv_delay
    409  10fe		       c9 0f		      CMP	#15
    410  1100		       d0 02		      BNE	.skip14then
    411  1102				   .condpart15
    412  1102		       c6 d7		      DEC	inv_x
    413  1104				   .skip14then
    414  1104				   .skip13then
    415  1104				   .skipL037
    416  1104				   .L038		;  if inv_hit	=  0  &&  inv_dir  =  0  &&  inv_delay	=  30 then inv_x  =  inv_x  -  1
    417  1104
    418  1104		       a5 e4		      LDA	inv_hit
    419  1106		       c9 00		      CMP	#0
    420  1108		       d0 0e		      BNE	.skipL038
    421  110a				   .condpart16
    422  110a		       a5 dc		      LDA	inv_dir
    423  110c		       c9 00		      CMP	#0
    424  110e		       d0 08		      BNE	.skip16then
    425  1110				   .condpart17
    426  1110		       a5 d9		      LDA	inv_delay
    427  1112		       c9 1e		      CMP	#30
    428  1114		       d0 02		      BNE	.skip17then
    429  1116				   .condpart18
    430  1116		       c6 d7		      DEC	inv_x
    431  1118				   .skip17then
    432  1118				   .skip16then
    433  1118				   .skipL038
    434  1118				   .
    435  1118							; 
    436  1118
    437  1118				   .L039		;  if inv_x  <  26 then inv_dir  =  1	:  inv_x  =  26  :  inv_y  =  inv_y  -	5
    438  1118
    439  1118		       a5 d7		      LDA	inv_x
    440  111a		       c9 1a		      CMP	#26
    441  111c		       b0 0f		      BCS	.skipL039
    442  111e				   .condpart19
    443  111e		       a9 01		      LDA	#1
    444  1120		       85 dc		      STA	inv_dir
    445  1122		       a9 1a		      LDA	#26
    446  1124		       85 d7		      STA	inv_x
    447  1126		       a5 d8		      LDA	inv_y
    448  1128		       38		      SEC
    449  1129		       e9 05		      SBC	#5
    450  112b		       85 d8		      STA	inv_y
    451  112d				   .skipL039
    452  112d				   .
    453  112d							; 
    454  112d
    455  112d				   .
    456  112d							; 
    457  112d
    458  112d				   .L040		;  player0x  =  inv_x	-  8  :  player0y  =  inv_y
    459  112d
    460  112d		       a5 d7		      LDA	inv_x
    461  112f		       38		      SEC
    462  1130		       e9 08		      SBC	#8
    463  1132		       85 84		      STA	player0x
    464  1134		       a5 d8		      LDA	inv_y
    465  1136		       85 8d		      STA	player0y
    466  1138				   .L041		;  return
    467  1138
    468  1138		       ba		      tsx
    469  1139		       b5 02		      lda	2,x	; check return address
    470  113b		       49 d1		      eor	#(>*)	; vs. current PCH
    471  113d		       29 e0		      and	#$E0	;  mask off all but top 3 bits
    472  113f		       f0 03		      beq	*+5	; if equal, do normal return
    473  1141		       4c dd ff 	      JMP	BS_return
    474  1144		       60		      RTS
    475  1145				   .
    476  1145							; 
    477  1145
    478  1145				   .
    479  1145							; 
    480  1145
    481  1145				   .
    482  1145							; 
    483  1145
    484  1145				   .
    485  1145							; 
    486  1145
    487  1145				   .draw__move_inv_shot
    488  1145							; draw__move_inv_shot
    489  1145
    490  1145				   .
    491  1145							; 
    492  1145
    493  1145				   .L042		;  player2:
    494  1145
    495  1145		       a2 6c		      LDX	#<playerL042_2
    496  1147		       86 a7		      STX	player2pointerlo
    497  1149		       a9 f4		      LDA	#>playerL042_2
    498  114b		       85 ac		      STA	player2pointerhi
    499  114d		       a9 09		      LDA	#9
    500  114f		       85 b2		      STA	player2height
    501  1151				   .
    502  1151							; 
    503  1151
    504  1151				   .L043		;  COLUP2  =  14
    505  1151
    506  1151		       a9 0e		      LDA	#14
    507  1153		       85 99		      STA	COLUP2
    508  1155				   .
    509  1155							; 
    510  1155
    511  1155				   .L044		;  inv_fire_delay  =  inv_fire_delay  +  1
    512  1155
    513  1155		       e6 e1		      INC	inv_fire_delay
    514  1157				   .
    515  1157							; 
    516  1157
    517  1157				   .L045		;  if inv_fired  =  0	&&  inv_fire_delay  =  180 then inv_shot_x  =  inv_x  :  inv_shot_y  =	inv_y  -  9
    518  1157
    519  1157		       a5 e2		      LDA	inv_fired
    520  1159		       c9 00		      CMP	#0
    521  115b		       d0 11		      BNE	.skipL045
    522  115d				   .condpart20
    523  115d		       a5 e1		      LDA	inv_fire_delay
    524  115f		       c9 b4		      CMP	#180
    525  1161		       d0 0b		      BNE	.skip20then
    526  1163				   .condpart21
    527  1163		       a5 d7		      LDA	inv_x
    528  1165		       85 dd		      STA	inv_shot_x
    529  1167		       a5 d8		      LDA	inv_y
    530  1169		       38		      SEC
    531  116a		       e9 09		      SBC	#9
    532  116c		       85 de		      STA	inv_shot_y
    533  116e				   .skip20then
    534  116e				   .skipL045
    535  116e				   .L046		;  if inv_fired  =  0	&&  inv_fire_delay  =  180 then player2x  =  inv_shot_x  :  player2y  =  inv_shot_y
    536  116e
    537  116e		       a5 e2		      LDA	inv_fired
    538  1170		       c9 00		      CMP	#0
    539  1172		       d0 0e		      BNE	.skipL046
    540  1174				   .condpart22
    541  1174		       a5 e1		      LDA	inv_fire_delay
    542  1176		       c9 b4		      CMP	#180
    543  1178		       d0 08		      BNE	.skip22then
    544  117a				   .condpart23
    545  117a		       a5 dd		      LDA	inv_shot_x
    546  117c		       85 86		      STA	player2x
    547  117e		       a5 de		      LDA	inv_shot_y
    548  1180		       85 8f		      STA	player2y
    549  1182				   .skip22then
    550  1182				   .skipL046
    551  1182				   .L047		;  if inv_fired  =  0	&&  inv_fire_delay  =  180 then inv_fired  =  1
    552  1182
    553  1182		       a5 e2		      LDA	inv_fired
    554  1184		       c9 00		      CMP	#0
    555  1186		       d0 0a		      BNE	.skipL047
    556  1188				   .condpart24
    557  1188		       a5 e1		      LDA	inv_fire_delay
    558  118a		       c9 b4		      CMP	#180
    559  118c		       d0 04		      BNE	.skip24then
    560  118e				   .condpart25
    561  118e		       a9 01		      LDA	#1
    562  1190		       85 e2		      STA	inv_fired
    563  1192				   .skip24then
    564  1192				   .skipL047
    565  1192				   .
    566  1192							; 
    567  1192
    568  1192				   .L048		;  if inv_fired  =  1 then inv_shot_y	=  inv_shot_y  -  2  :	player2y  =  inv_shot_y
    569  1192
    570  1192		       a5 e2		      LDA	inv_fired
    571  1194		       c9 01		      CMP	#1
    572  1196		       d0 0b		      BNE	.skipL048
    573  1198				   .condpart26
    574  1198		       a5 de		      LDA	inv_shot_y
    575  119a		       38		      SEC
    576  119b		       e9 02		      SBC	#2
    577  119d		       85 de		      STA	inv_shot_y
    578  119f		       a5 de		      LDA	inv_shot_y
    579  11a1		       85 8f		      STA	player2y
    580  11a3				   .skipL048
    581  11a3				   .
    582  11a3							; 
    583  11a3
    584  11a3				   .L049		;  if inv_shot_y  <  12 then inv_fired  =  0  :  inv_fire_delay  =  0	:  inv_shot_y  =  88  :  player2y  =  inv_shot_y
    585  11a3
    586  11a3		       a5 de		      LDA	inv_shot_y
    587  11a5		       c9 0c		      CMP	#12
    588  11a7		       b0 0e		      BCS	.skipL049
    589  11a9				   .condpart27
    590  11a9		       a9 00		      LDA	#0
    591  11ab		       85 e2		      STA	inv_fired
    592  11ad		       85 e1		      STA	inv_fire_delay
    593  11af		       a9 58		      LDA	#88
    594  11b1		       85 de		      STA	inv_shot_y
    595  11b3		       a5 de		      LDA	inv_shot_y
    596  11b5		       85 8f		      STA	player2y
    597  11b7				   .skipL049
    598  11b7				   .
    599  11b7							; 
    600  11b7
    601  11b7				   .L050		;  return
    602  11b7
    603  11b7		       ba		      tsx
    604  11b8		       b5 02		      lda	2,x	; check return address
    605  11ba		       49 d1		      eor	#(>*)	; vs. current PCH
    606  11bc		       29 e0		      and	#$E0	;  mask off all but top 3 bits
    607  11be		       f0 03		      beq	*+5	; if equal, do normal return
    608  11c0		       4c dd ff 	      JMP	BS_return
    609  11c3		       60		      RTS
    610  11c4				   .
    611  11c4							; 
    612  11c4
    613  11c4				   .
    614  11c4							; 
    615  11c4
    616  11c4				   .
    617  11c4							; 
    618  11c4
    619  11c4				   .
    620  11c4							; 
    621  11c4
    622  11c4				   .col_shot_inv
    623  11c4							; col_shot_inv
    624  11c4
    625  11c4				   .L051		;  if shot_x  +  3  >=  inv_x	&&  shot_x  +  3  <=  inv_x  +	6  &&  shot_y  >  inv_y then inv_hit  =  1
    626  11c4
    627  11c4							; complex condition detected
    628  11c4		       a5 df		      LDA	shot_x
    629  11c6		       18		      CLC
    630  11c7		       69 03		      ADC	#3
    631  11c9							; todo: this LDA is spurious and should be prevented ->	LDA  1,x
    632  11c9		       c5 d7		      CMP	inv_x
    633  11cb		       90 1d		      BCC	.skipL051
    634  11cd				   .condpart28
    635  11cd							; complex condition detected
    636  11cd		       a5 d7		      LDA	inv_x
    637  11cf		       18		      CLC
    638  11d0		       69 06		      ADC	#6
    639  11d2		       48		      PHA
    640  11d3		       a5 df		      LDA	shot_x
    641  11d5		       18		      CLC
    642  11d6		       69 03		      ADC	#3
    643  11d8		       48		      PHA
    644  11d9		       ba		      TSX
    645  11da		       68		      PLA
    646  11db		       68		      PLA
    647  11dc							; todo: this LDA is spurious and should be prevented ->	LDA  2,x
    648  11dc		       d5 01		      CMP	1,x
    649  11de		       90 0a		      BCC	.skip28then
    650  11e0				   .condpart29
    651  11e0		       a5 d8		      LDA	inv_y
    652  11e2		       c5 e0		      CMP	shot_y
    653  11e4		       b0 04		      BCS	.skip29then
    654  11e6				   .condpart30
    655  11e6		       a9 01		      LDA	#1
    656  11e8		       85 e4		      STA	inv_hit
    657  11ea				   .skip29then
    658  11ea				   .skip28then
    659  11ea				   .skipL051
    660  11ea				   .
    661  11ea							; 
    662  11ea
    663  11ea				   .L052		;  if inv_hit	=  1 then inv_blast_delay  =  inv_blast_delay  +  1
    664  11ea
    665  11ea		       a5 e4		      LDA	inv_hit
    666  11ec		       c9 01		      CMP	#1
    667  11ee		       d0 02		      BNE	.skipL052
    668  11f0				   .condpart31
    669  11f0		       e6 e5		      INC	inv_blast_delay
    670  11f2				   .skipL052
    671  11f2				   .
    672  11f2							; 
    673  11f2
    674  11f2				   .L053		;  if inv_blast_delay	>  30 then score  =  score  +  10  :  inv_hit  =  0  :	gosub reset_blast
    675  11f2
    676  11f2		       a9 1e		      LDA	#30
    677  11f4		       c5 e5		      CMP	inv_blast_delay
    678  11f6		       b0 1c		      BCS	.skipL053
    679  11f8				   .condpart32
    680  11f8		       f8		      SED
    681  11f9		       18		      CLC
    682  11fa		       a5 d4		      LDA	score+2
    683  11fc		       69 10		      ADC	#$10
    684  11fe		       85 d4		      STA	score+2
    685  1200		       a5 d3		      LDA	score+1
    686  1202		       69 00		      ADC	#$00
    687  1204		       85 d3		      STA	score+1
    688  1206		       a5 d2		      LDA	score
    689  1208		       69 00		      ADC	#$00
    690  120a		       85 d2		      STA	score
    691  120c		       d8		      CLD
    692  120d		       a9 00		      LDA	#0
    693  120f		       85 e4		      STA	inv_hit
    694  1211		       20 33 d2 	      jsr	.reset_blast
    695  1214
    696  1214				   .skipL053
    697  1214				   .
    698  1214							; 
    699  1214
    700  1214				   .L054		;  if inv_hit	=  1 then player0:  
    701  1214
    702  1214		       a5 e4		      LDA	inv_hit
    703  1216		       c9 01		      CMP	#1
    704  1218		       d0 0c		      BNE	.skipL054
    705  121a				   .condpart33
    706  121a		       a2 74		      LDX	#<player33then_0
    707  121c		       86 a2		      STX	player0pointerlo
    708  121e		       a9 f4		      LDA	#>player33then_0
    709  1220		       85 a3		      STA	player0pointerhi
    710  1222		       a9 09		      LDA	#9
    711  1224		       85 b0		      STA	player0height
    712  1226				   .skipL054
    713  1226				   .
    714  1226							; 
    715  1226
    716  1226				   .L055		;  return
    717  1226
    718  1226		       ba		      tsx
    719  1227		       b5 02		      lda	2,x	; check return address
    720  1229		       49 d2		      eor	#(>*)	; vs. current PCH
    721  122b		       29 e0		      and	#$E0	;  mask off all but top 3 bits
    722  122d		       f0 03		      beq	*+5	; if equal, do normal return
    723  122f		       4c dd ff 	      JMP	BS_return
    724  1232		       60		      RTS
    725  1233				   .
    726  1233							; 
    727  1233
    728  1233				   .
    729  1233							; 
    730  1233
    731  1233				   .
    732  1233							; 
    733  1233
    734  1233				   .
    735  1233							; 
    736  1233
    737  1233				   .reset_blast
    738  1233							; reset_blast
    739  1233
    740  1233				   .L056		;  player0:  
    741  1233
    742  1233		       a2 7d		      LDX	#<playerL056_0
    743  1235		       86 a2		      STX	player0pointerlo
    744  1237		       a9 f4		      LDA	#>playerL056_0
    745  1239		       85 a3		      STA	player0pointerhi
    746  123b		       a9 09		      LDA	#9
    747  123d		       85 b0		      STA	player0height
    748  123f				   .
    749  123f							; 
    750  123f
    751  123f				   .
    752  123f							; 
    753  123f
    754  123f				   .L057		;  inv_blast_delay  =	0  :  inv_x  =	 ( rand & 117 )   +  26  :  inv_y  =  76
    755  123f
    756  123f		       a9 00		      LDA	#0
    757  1241		       85 e5		      STA	inv_blast_delay
    758  1243							; complex statement detected
    759  1243		       85 d1		      sta	temp7
    760  1245		       a9 d2		      lda	#>(ret_point2-1)
    761  1247		       48		      pha
    762  1248		       a9 5a		      lda	#<(ret_point2-1)
    763  124a		       48		      pha
    764  124b		       a9 f4		      lda	#>(randomize-1)
    765  124d		       48		      pha
    766  124e		       a9 31		      lda	#<(randomize-1)
    767  1250		       48		      pha
    768  1251		       a5 d1		      lda	temp7
    769  1253		       48		      pha
    770  1254		       8a		      txa
    771  1255		       48		      pha
    772  1256		       a2 02		      ldx	#2
    773  1258		       4c eb ff 	      jmp	BS_jsr
    774  125b				   ret_point2
    775  125b		       29 75		      AND	#117
    776  125d		       18		      CLC
    777  125e		       69 1a		      ADC	#26
    778  1260		       85 d7		      STA	inv_x
    779  1262		       a9 4c		      LDA	#76
    780  1264		       85 d8		      STA	inv_y
    781  1266				   .
    782  1266							; 
    783  1266
    784  1266				   .L058		;  return
    785  1266
    786  1266		       ba		      tsx
    787  1267		       b5 02		      lda	2,x	; check return address
    788  1269		       49 d2		      eor	#(>*)	; vs. current PCH
    789  126b		       29 e0		      and	#$E0	;  mask off all but top 3 bits
    790  126d		       f0 03		      beq	*+5	; if equal, do normal return
    791  126f		       4c dd ff 	      JMP	BS_return
    792  1272		       60		      RTS
    793  1273				   .
    794  1273							; 
    795  1273
    796  1273				   .
    797  1273							; 
    798  1273
    799  1273				   .
    800  1273							; 
    801  1273
    802  1273				   .
    803  1273							; 
    804  1273
    805  1273				   .draw__move_turret
    806  1273							; draw__move_turret
    807  1273
    808  1273				   .L059		;  player1:
    809  1273
    810  1273		       a2 86		      LDX	#<playerL059_1
    811  1275		       86 a6		      STX	player1pointerlo
    812  1277		       a9 f4		      LDA	#>playerL059_1
    813  1279		       85 ab		      STA	player1pointerhi
    814  127b		       a9 09		      LDA	#9
    815  127d		       85 b1		      STA	player1height
    816  127f				   .
    817  127f							; 
    818  127f
    819  127f				   .
    820  127f							; 
    821  127f
    822  127f				   .L060		;  _COLUP1  =	196
    823  127f
    824  127f		       a9 c4		      LDA	#196
    825  1281		       85 98		      STA	_COLUP1
    826  1283				   .
    827  1283							; 
    828  1283
    829  1283				   .L061		;  if joy0left  &&  tur_x  >=	26 then tur_x  =  tur_x  -  1
    830  1283
    831  1283		       2c 80 02 	      bit	SWCHA
    832  1286		       70 08		      BVS	.skipL061
    833  1288				   .condpart34
    834  1288		       a5 da		      LDA	tur_x
    835  128a		       c9 1a		      CMP	#26
    836  128c		       90 02		      BCC	.skip34then
    837  128e				   .condpart35
    838  128e		       c6 da		      DEC	tur_x
    839  1290				   .skip34then
    840  1290				   .skipL061
    841  1290				   .L062		;  if joy0right  &&  tur_x  <=  143 then tur_x  =  tur_x  +  1
    842  1290
    843  1290		       2c 80 02 	      bit	SWCHA
    844  1293		       30 08		      BMI	.skipL062
    845  1295				   .condpart36
    846  1295		       a9 8f		      LDA	#143
    847  1297		       c5 da		      CMP	tur_x
    848  1299		       90 02		      BCC	.skip36then
    849  129b				   .condpart37
    850  129b		       e6 da		      INC	tur_x
    851  129d				   .skip36then
    852  129d				   .skipL062
    853  129d				   .
    854  129d							; 
    855  129d
    856  129d				   .
    857  129d							; 
    858  129d
    859  129d				   .
    860  129d							; 
    861  129d
    862  129d				   .
    863  129d							; 
    864  129d
    865  129d				   .L063		;  player1x  =  tur_x	:  player1y  =	tur_y
    866  129d
    867  129d		       a5 da		      LDA	tur_x
    868  129f		       85 85		      STA	player1x
    869  12a1		       a5 db		      LDA	tur_y
    870  12a3		       85 8e		      STA	player1y
    871  12a5				   .
    872  12a5							; 
    873  12a5
    874  12a5				   .L064		;  return
    875  12a5
    876  12a5		       ba		      tsx
    877  12a6		       b5 02		      lda	2,x	; check return address
    878  12a8		       49 d2		      eor	#(>*)	; vs. current PCH
    879  12aa		       29 e0		      and	#$E0	;  mask off all but top 3 bits
    880  12ac		       f0 03		      beq	*+5	; if equal, do normal return
    881  12ae		       4c dd ff 	      JMP	BS_return
    882  12b1		       60		      RTS
    883  12b2				   .
    884  12b2							; 
    885  12b2
    886  12b2				   .
    887  12b2							; 
    888  12b2
    889  12b2				   .
    890  12b2							; 
    891  12b2
    892  12b2				   .
    893  12b2							; 
    894  12b2
    895  12b2				   .draw__move_turret_shot
    896  12b2							; draw__move_turret_shot
    897  12b2
    898  12b2				   .L065		;  player3:
    899  12b2
    900  12b2		       a2 8e		      LDX	#<playerL065_3
    901  12b4		       86 a8		      STX	player3pointerlo
    902  12b6		       a9 f4		      LDA	#>playerL065_3
    903  12b8		       85 ad		      STA	player3pointerhi
    904  12ba		       a9 09		      LDA	#9
    905  12bc		       85 b3		      STA	player3height
    906  12be				   .
    907  12be							; 
    908  12be
    909  12be				   .L066		;  COLUP3  =  14
    910  12be
    911  12be		       a9 0e		      LDA	#14
    912  12c0		       85 9a		      STA	COLUP3
    913  12c2				   .
    914  12c2							; 
    915  12c2
    916  12c2				   .L067		;  if joy0fire  &&  tur_fired	=  0 then tur_fired  =	1  :  shot_x  =  tur_x	:  shot_y  =  tur_y  +	1  :  player3x	=  shot_x  :  player3y	=  shot_y
    917  12c2
    918  12c2		       24 0c		      bit	INPT4
    919  12c4		       30 1d		      BMI	.skipL067
    920  12c6				   .condpart38
    921  12c6		       a5 e3		      LDA	tur_fired
    922  12c8		       c9 00		      CMP	#0
    923  12ca		       d0 17		      BNE	.skip38then
    924  12cc				   .condpart39
    925  12cc		       a9 01		      LDA	#1
    926  12ce		       85 e3		      STA	tur_fired
    927  12d0		       a5 da		      LDA	tur_x
    928  12d2		       85 df		      STA	shot_x
    929  12d4		       a5 db		      LDA	tur_y
    930  12d6		       18		      CLC
    931  12d7		       69 01		      ADC	#1
    932  12d9		       85 e0		      STA	shot_y
    933  12db		       a5 df		      LDA	shot_x
    934  12dd		       85 87		      STA	player3x
    935  12df		       a5 e0		      LDA	shot_y
    936  12e1		       85 90		      STA	player3y
    937  12e3				   .skip38then
    938  12e3				   .skipL067
    939  12e3				   .
    940  12e3							; 
    941  12e3
    942  12e3				   .L068		;  if tur_fired  =  1 then shot_y  =  shot_y  +  2  :	player3x  =  shot_x  :	player3y  =  shot_y
    943  12e3
    944  12e3		       a5 e3		      LDA	tur_fired
    945  12e5		       c9 01		      CMP	#1
    946  12e7		       d0 0f		      BNE	.skipL068
    947  12e9				   .condpart40
    948  12e9		       a5 e0		      LDA	shot_y
    949  12eb		       18		      CLC
    950  12ec		       69 02		      ADC	#2
    951  12ee		       85 e0		      STA	shot_y
    952  12f0		       a5 df		      LDA	shot_x
    953  12f2		       85 87		      STA	player3x
    954  12f4		       a5 e0		      LDA	shot_y
    955  12f6		       85 90		      STA	player3y
    956  12f8				   .skipL068
    957  12f8				   .
    958  12f8							; 
    959  12f8
    960  12f8				   .L069		;  if shot_y  >  77  &&  ! joy0fire then tur_fired  =	0  :  shot_y  =  0  :  player3y  =  shot_y
    961  12f8
    962  12f8		       a9 4d		      LDA	#77
    963  12fa		       c5 e0		      CMP	shot_y
    964  12fc		       b0 0e		      BCS	.skipL069
    965  12fe				   .condpart41
    966  12fe		       24 0c		      bit	INPT4
    967  1300		       10 0a		      BPL	.skip41then
    968  1302				   .condpart42
    969  1302		       a9 00		      LDA	#0
    970  1304		       85 e3		      STA	tur_fired
    971  1306		       85 e0		      STA	shot_y
    972  1308		       a5 e0		      LDA	shot_y
    973  130a		       85 90		      STA	player3y
    974  130c				   .skip41then
    975  130c				   .skipL069
    976  130c				   .
    977  130c							; 
    978  130c
    979  130c				   .L070		;  return
    980  130c
    981  130c		       ba		      tsx
    982  130d		       b5 02		      lda	2,x	; check return address
    983  130f		       49 d3		      eor	#(>*)	; vs. current PCH
    984  1311		       29 e0		      and	#$E0	;  mask off all but top 3 bits
    985  1313		       f0 03		      beq	*+5	; if equal, do normal return
    986  1315		       4c dd ff 	      JMP	BS_return
    987  1318		       60		      RTS
    988  1319				   .
    989  1319							; 
    990  1319
    991  1319				   .
    992  1319							; 
    993  1319
    994  1319				   .
    995  1319							; 
    996  1319
    997  1319				   .game_over
    998  1319							; game_over
    999  1319
   1000  1319				   .
   1001  1319							; 
   1002  1319
   1003  1319				   .L071		;  if joy0up then reboot
   1004  1319
   1005  1319		       a9 10		      lda	#$10
   1006  131b		       2c 80 02 	      bit	SWCHA
   1007  131e		       d0 03		      BNE	.skipL071
   1008  1320				   .condpart43
   1009  1320		       6c fc ff 	      JMP	($FFFC)
   1010  1323				   .skipL071
   1011  1323				   .
   1012  1323							; 
   1013  1323
   1014  1323				   .L072		;  score  =  50
   1015  1323
   1016  1323		       a9 50		      LDA	#$50
   1017  1325		       85 d4		      STA	score+2
   1018  1327		       a9 00		      LDA	#$00
   1019  1329		       85 d3		      STA	score+1
   1020  132b		       a9 00		      LDA	#$00
   1021  132d		       85 d2		      STA	score
   1022  132f				   .
   1023  132f							; 
   1024  132f
   1025  132f				   .L073		;  player2:
   1026  132f
   1027  132f		       a2 96		      LDX	#<playerL073_2
   1028  1331		       86 a7		      STX	player2pointerlo
   1029  1333		       a9 f4		      LDA	#>playerL073_2
   1030  1335		       85 ac		      STA	player2pointerhi
   1031  1337		       a9 1a		      LDA	#26
   1032  1339		       85 b2		      STA	player2height
   1033  133b				   .
   1034  133b							; 
   1035  133b
   1036  133b				   .L074		;  player3:
   1037  133b
   1038  133b		       a2 af		      LDX	#<playerL074_3
   1039  133d		       86 a8		      STX	player3pointerlo
   1040  133f		       a9 f4		      LDA	#>playerL074_3
   1041  1341		       85 ad		      STA	player3pointerhi
   1042  1343		       a9 1a		      LDA	#26
   1043  1345		       85 b3		      STA	player3height
   1044  1347				   .
   1045  1347							; 
   1046  1347
   1047  1347				   .L075		;  player0x  =  0  :  player0y  =  0
   1048  1347
   1049  1347		       a9 00		      LDA	#0
   1050  1349		       85 84		      STA	player0x
   1051  134b		       85 8d		      STA	player0y
   1052  134d				   .L076		;  player1x  =  0  :  player1y  =  0
   1053  134d
   1054  134d		       a9 00		      LDA	#0
   1055  134f		       85 85		      STA	player1x
   1056  1351		       85 8e		      STA	player1y
   1057  1353				   .L077		;  COLUP0  =  0
   1058  1353
   1059  1353		       a9 00		      LDA	#0
   1060  1355		       85 06		      STA	COLUP0
   1061  1357				   .L078		;  COLUP1  =  0
   1062  1357
   1063  1357		       a9 00		      LDA	#0
   1064  1359		       85 07		      STA	COLUP1
   1065  135b				   .
   1066  135b							; 
   1067  135b
   1068  135b				   .L079		;  player2x  =  85  :	player2y  =  66
   1069  135b
   1070  135b		       a9 55		      LDA	#85
   1071  135d		       85 86		      STA	player2x
   1072  135f		       a9 42		      LDA	#66
   1073  1361		       85 8f		      STA	player2y
   1074  1363				   .L080		;  player3x  =  85  :	player3y  =  39
   1075  1363
   1076  1363		       a9 55		      LDA	#85
   1077  1365		       85 87		      STA	player3x
   1078  1367		       a9 27		      LDA	#39
   1079  1369		       85 90		      STA	player3y
   1080  136b				   .
   1081  136b							; 
   1082  136b
   1083  136b				   .L081		;  drawscreen
   1084  136b
   1085  136b		       85 d1		      sta	temp7
   1086  136d		       a9 d3		      lda	#>(ret_point3-1)
   1087  136f		       48		      pha
   1088  1370		       a9 82		      lda	#<(ret_point3-1)
   1089  1372		       48		      pha
   1090  1373		       a9 f0		      lda	#>(drawscreen-1)
   1091  1375		       48		      pha
   1092  1376		       a9 39		      lda	#<(drawscreen-1)
   1093  1378		       48		      pha
   1094  1379		       a5 d1		      lda	temp7
   1095  137b		       48		      pha
   1096  137c		       8a		      txa
   1097  137d		       48		      pha
   1098  137e		       a2 02		      ldx	#2
   1099  1380		       4c eb ff 	      jmp	BS_jsr
   1100  1383				   ret_point3
   1101  1383				   .
   1102  1383							; 
   1103  1383
   1104  1383				   .L082		;  goto game_over
   1105  1383
   1106  1383		       4c 19 d3 	      jmp	.game_over
   1107  1386
   1108  1386					      if	ECHO1
      3150 bytes of ROM space left in bank 1
   1109  1386					      echo	"    ",[(start_bank1 - *)]d , "bytes of ROM space left in bank 1")
   1110  1386					      endif
   1111  1386		       00 01	   ECHO1      =	1
   1112  1fd4					      ORG	$1FF4-bscode_length
   1113  1fd4					      RORG	$DFF4-bscode_length
   1114  1fd4		       a2 ff	   start_bank1 ldx	#$ff
   1115  1fd6				  -	      ifconst	FASTFETCH	; using DPC+
   1116  1fd6				  -	      stx	FASTFETCH
   1117  1fd6					      endif
   1118  1fd6		       9a		      txs
   1119  1fd7				  -	      if	bankswitch == 64
   1120  1fd7				  -	      lda	#(((>(start-1)) & $0F) | $F0)
   1121  1fd7					      else
   1122  1fd7		       a9 f3		      lda	#>(start-1)
   1123  1fd9					      endif
   1124  1fd9		       48		      pha
   1125  1fda		       a9 f4		      lda	#<(start-1)
   1126  1fdc		       48		      pha
   1127  1fdd		       48		      pha
   1128  1fde		       8a		      txa
   1129  1fdf		       48		      pha
   1130  1fe0		       ba		      tsx
   1131  1fe1					      if	bankswitch != 64
   1132  1fe1		       b5 04		      lda	4,x	; get high byte of return address
   1133  1fe3		       2a		      rol
   1134  1fe4		       2a		      rol
   1135  1fe5		       2a		      rol
   1136  1fe6		       2a		      rol
   1137  1fe7		       29 01		      and	#bs_mask	;1 3 or 7 for F8/F6/F4
   1138  1fe9		       aa		      tax
   1139  1fea		       e8		      inx
   1140  1feb				  -	      else
   1141  1feb				  -	      lda	4,x	; get high byte of return address
   1142  1feb				  -	      tay
   1143  1feb				  -	      ora	#$10	; change our bank nibble into a valid rom mirror
   1144  1feb				  -	      sta	4,x
   1145  1feb				  -	      tya
   1146  1feb				  -	      lsr
   1147  1feb				  -	      lsr
   1148  1feb				  -	      lsr
   1149  1feb				  -	      lsr
   1150  1feb				  -	      tax
   1151  1feb				  -	      inx
   1152  1feb					      endif
   1153  1feb		       bd f7 1f 	      lda	bankswitch_hotspot-1,x
   1154  1fee		       68		      pla
   1155  1fef		       aa		      tax
   1156  1ff0		       68		      pla
   1157  1ff1		       60		      rts
   1158  1ff2				  -	      if	((* & $1FFF) > ((bankswitch_hotspot & $1FFF) - 1))
   1159  1ff2				  -	      echo	"WARNING: size parameter in banksw.asm too small - the program probably will not work."
   1160  1ff2				  -	      echo	"Change to",[(*-begin_bscode+1)&$FF]d,"and try again."
   1161  1ff2					      endif
   1162  1ffc					      ORG	$1FFC
   1163  1ffc					      RORG	$DFFC
   1164  1ffc		       d4 df		      .word.w	(start_bank1 & $ffff)
   1165  1ffe		       d4 df		      .word.w	(start_bank1 & $ffff)
   1166  2000					      ORG	$2000
   1167  2000					      RORG	$F000
   1168  2000							; Provided under the CC0 license. See the included LICENSE.txt for details.
   1169  2000
   1170  2000				   FineAdjustTableBegin
   1171  2000		       60		      .byte.b	%01100000	;left 6
   1172  2001		       50		      .byte.b	%01010000
   1173  2002		       40		      .byte.b	%01000000
   1174  2003		       30		      .byte.b	%00110000
   1175  2004		       20		      .byte.b	%00100000
   1176  2005		       10		      .byte.b	%00010000
   1177  2006		       00		      .byte.b	%00000000	;left 0
   1178  2007		       f0		      .byte.b	%11110000
   1179  2008		       e0		      .byte.b	%11100000
   1180  2009		       d0		      .byte.b	%11010000
   1181  200a		       c0		      .byte.b	%11000000
   1182  200b		       b0		      .byte.b	%10110000
   1183  200c		       a0		      .byte.b	%10100000
   1184  200d		       90		      .byte.b	%10010000
   1185  200e		       80		      .byte.b	%10000000	;right 8
   1186  200e		       ef 0f	   FineAdjustTableEnd =	FineAdjustTableBegin - 241
   1187  200f
   1188  200f				   PFStart
   1189  200f		       57 2b 00 15*	      .byte.b	87,43,0,21,0,0,0,10
   1190  2017				   blank_pf
   1191  2017		       00 00 00 00*	      .byte.b	0,0,0,0,0,0,0,5
   1192  201f							; .byte 43,21,0,10,0,0,0,5
   1193  201f				  -	      ifconst	screenheight
   1194  201f				  -pfsub
   1195  201f				  -	      .byte	8,4,2,2,1,0,0,1,0
   1196  201f					      endif
   1197  201f							;--set initial P1 positions
   1198  201f				   multisprite_setup
   1199  201f		       a9 0f		      lda	#15
   1200  2021		       85 c4		      sta	pfheight
   1201  2023
   1202  2023		       a2 04		      ldx	#4
   1203  2025							; stx temp3
   1204  2025				   SetCopyHeight
   1205  2025							;	lda #76
   1206  2025							;	sta NewSpriteX,X
   1207  2025							;	lda CopyColorData,X
   1208  2025							;	sta NewCOLUP1,X
   1209  2025							;lda SpriteHeightTable,X
   1210  2025							; sta spriteheight,x
   1211  2025		       8a		      txa
   1212  2026		       95 9d		      sta	SpriteGfxIndex,X
   1213  2028		       95 f1		      sta	spritesort,X
   1214  202a		       ca		      dex
   1215  202b		       10 f8		      bpl	SetCopyHeight
   1216  202d
   1217  202d
   1218  202d
   1219  202d							; since we can't turn off pf, point PF to zeros here
   1220  202d		       a9 f0		      lda	#>blank_pf
   1221  202f		       85 be		      sta	PF2pointer+1
   1222  2031		       85 bc		      sta	PF1pointer+1
   1223  2033		       a9 17		      lda	#<blank_pf
   1224  2035		       85 bd		      sta	PF2pointer
   1225  2037		       85 bb		      sta	PF1pointer
   1226  2039		       60		      rts
   1227  203a
   1228  203a				   drawscreen
   1229  203a				  -	      ifconst	debugscore
   1230  203a				  -	      jsr	debugcycles
   1231  203a					      endif
   1232  203a
   1233  203a				   WaitForOverscanEnd
   1234  203a		       ad 84 02 	      lda	INTIM
   1235  203d		       30 fb		      bmi	WaitForOverscanEnd
   1236  203f
   1237  203f		       a9 02		      lda	#2
   1238  2041		       85 02		      sta	WSYNC
   1239  2043		       85 00		      sta	VSYNC
   1240  2045		       85 02		      sta	WSYNC
   1241  2047		       85 02		      sta	WSYNC
   1242  2049		       4a		      lsr
   1243  204a		       85 27		      sta	VDELBL
   1244  204c		       85 25		      sta	VDELP0
   1245  204e		       85 02		      sta	WSYNC
   1246  2050		       85 00		      sta	VSYNC	;turn off VSYNC
   1247  2052				  -	      ifconst	overscan_time
   1248  2052				  -	      lda	#overscan_time+5+128
   1249  2052					      else
   1250  2052		       a9 aa		      lda	#42+128
   1251  2054					      endif
   1252  2054		       8d 96 02 	      sta	TIM64T
   1253  2057
   1254  2057							; run possible vblank bB code
   1255  2057				  -	      ifconst	vblank_bB_code
   1256  2057				  -	      jsr	vblank_bB_code
   1257  2057					      endif
   1258  2057
   1259  2057		       20 dc f1 	      jsr	setscorepointers
   1260  205a		       20 7b f3 	      jsr	SetupP1Subroutine
   1261  205d
   1262  205d							;-------------
   1263  205d
   1264  205d
   1265  205d
   1266  205d
   1267  205d
   1268  205d							;--position P0, M0, M1, BL
   1269  205d
   1270  205d		       20 b5 f0 	      jsr	PrePositionAllObjects
   1271  2060
   1272  2060							;--set up player 0 pointer
   1273  2060
   1274  2060		       c6 8d		      dec	player0y
   1275  2062		       a5 a2		      lda	player0pointer	; player0: must be run every frame!
   1276  2064		       38		      sec
   1277  2065		       e5 8d		      sbc	player0y
   1278  2067		       18		      clc
   1279  2068		       65 b0		      adc	player0height
   1280  206a		       85 a2		      sta	player0pointer
   1281  206c
   1282  206c		       a5 8d		      lda	player0y
   1283  206e		       85 cf		      sta	P0Top
   1284  2070		       38		      sec
   1285  2071		       e5 b0		      sbc	player0height
   1286  2073		       18		      clc
   1287  2074		       69 80		      adc	#$80
   1288  2076		       85 a4		      sta	P0Bottom
   1289  2078
   1290  2078
   1291  2078							;--some final setup
   1292  2078
   1293  2078		       a2 04		      ldx	#4
   1294  207a		       a9 80		      lda	#$80
   1295  207c				   cycle74_HMCLR
   1296  207c		       95 20		      sta	HMP0,X
   1297  207e		       ca		      dex
   1298  207f		       10 fb		      bpl	cycle74_HMCLR
   1299  2081							;	sta HMCLR
   1300  2081
   1301  2081
   1302  2081		       a9 00		      lda	#0
   1303  2083		       85 0e		      sta	PF1
   1304  2085		       85 0f		      sta	PF2
   1305  2087		       85 1b		      sta	GRP0
   1306  2089		       85 1c		      sta	GRP1
   1307  208b
   1308  208b
   1309  208b		       20 d0 f0 	      jsr	KernelSetupSubroutine
   1310  208e
   1311  208e				   WaitForVblankEnd
   1312  208e		       ad 84 02 	      lda	INTIM
   1313  2091		       30 fb		      bmi	WaitForVblankEnd
   1314  2093		       a9 00		      lda	#0
   1315  2095		       85 02		      sta	WSYNC
   1316  2097		       85 01		      sta	VBLANK	;turn off VBLANK - it was turned on by overscan
   1317  2099		       85 2c		      sta	CXCLR
   1318  209b
   1319  209b
   1320  209b		       4c 5d f1 	      jmp	KernelRoutine
   1321  209e
   1322  209e
   1323  209e				   PositionASpriteSubroutine		;call this function with A == horizontal position (0-159)
   1324  209e							;and X == the object to be positioned (0=P0, 1=P1, 2=M0, etc.)
   1325  209e							;if you do not wish to write to P1 during this function, make
   1326  209e							;sure Y==0 before you call it.  This function will change Y, and A
   1327  209e							;will be the value put into HMxx when returned.
   1328  209e							;Call this function with at least 11 cycles left in the scanline 
   1329  209e							;(jsr + sec + sta WSYNC = 11); it will return 9 cycles
   1330  209e							;into the second scanline
   1331  209e		       38		      sec
   1332  209f		       85 02		      sta	WSYNC	;begin line 1
   1333  20a1		       8d 2b 00 	      sta.w	HMCLR	;+4	 4
   1334  20a4				   DivideBy15Loop
   1335  20a4		       e9 0f		      sbc	#15
   1336  20a6		       b0 fc		      bcs	DivideBy15Loop	;+4/5	8/13.../58
   1337  20a8
   1338  20a8		       a8		      tay		;+2	10/15/...60
   1339  20a9		       b9 0f ef 	      lda	FineAdjustTableEnd,Y	;+5	15/20/...65
   1340  20ac
   1341  20ac							;	15
   1342  20ac		       95 20		      sta	HMP0,X	;+4	19/24/...69
   1343  20ae		       95 10		      sta	RESP0,X	;+4	23/28/33/38/43/48/53/58/63/68/73
   1344  20b0		       85 02		      sta	WSYNC	;+3	 0	begin line 2
   1345  20b2		       85 2a		      sta	HMOVE	;+3
   1346  20b4		       60		      rts		;+6	 9
   1347  20b5
   1348  20b5							;-------------------------------------------------------------------------
   1349  20b5
   1350  20b5				   PrePositionAllObjects
   1351  20b5
   1352  20b5		       a2 04		      ldx	#4
   1353  20b7		       a5 82		      lda	ballx
   1354  20b9		       20 9e f0 	      jsr	PositionASpriteSubroutine
   1355  20bc
   1356  20bc		       ca		      dex
   1357  20bd		       a5 81		      lda	missile1x
   1358  20bf		       20 9e f0 	      jsr	PositionASpriteSubroutine
   1359  20c2
   1360  20c2		       ca		      dex
   1361  20c3		       a5 80		      lda	missile0x
   1362  20c5		       20 9e f0 	      jsr	PositionASpriteSubroutine
   1363  20c8
   1364  20c8		       ca		      dex
   1365  20c9		       ca		      dex
   1366  20ca		       a5 84		      lda	player0x
   1367  20cc		       20 9e f0 	      jsr	PositionASpriteSubroutine
   1368  20cf
   1369  20cf		       60		      rts
   1370  20d0
   1371  20d0
   1372  20d0							;-------------------------------------------------------------------------
   1373  20d0
   1374  20d0
   1375  20d0
   1376  20d0
   1377  20d0
   1378  20d0
   1379  20d0
   1380  20d0
   1381  20d0							;-------------------------------------------------------------------------
   1382  20d0
   1383  20d0
   1384  20d0				   KernelSetupSubroutine
   1385  20d0
   1386  20d0		       a2 04		      ldx	#4
   1387  20d2				   AdjustYValuesUpLoop
   1388  20d2		       b5 8e		      lda	NewSpriteY,X
   1389  20d4		       18		      clc
   1390  20d5		       69 02		      adc	#2
   1391  20d7		       95 8e		      sta	NewSpriteY,X
   1392  20d9		       ca		      dex
   1393  20da		       10 f6		      bpl	AdjustYValuesUpLoop
   1394  20dc
   1395  20dc
   1396  20dc		       a6 cd		      ldx	temp3	; first sprite displayed
   1397  20de
   1398  20de		       b5 9d		      lda	SpriteGfxIndex,x
   1399  20e0		       a8		      tay
   1400  20e1		       b9 8e 00 	      lda	NewSpriteY,y
   1401  20e4		       85 ce		      sta	RepoLine
   1402  20e6
   1403  20e6		       b5 9c		      lda	SpriteGfxIndex-1,x
   1404  20e8		       a8		      tay
   1405  20e9		       b9 8e 00 	      lda	NewSpriteY,y
   1406  20ec		       85 d0		      sta	temp6
   1407  20ee
   1408  20ee		       86 83		      stx	SpriteIndex
   1409  20f0
   1410  20f0
   1411  20f0
   1412  20f0		       a9 ff		      lda	#255
   1413  20f2		       85 a5		      sta	P1Bottom
   1414  20f4
   1415  20f4		       a5 8d		      lda	player0y
   1416  20f6				  -	      ifconst	screenheight
   1417  20f6				  -	      cmp	#screenheight+1
   1418  20f6					      else
   1419  20f6		       c9 59		      cmp	#$59
   1420  20f8					      endif
   1421  20f8		       90 04		      bcc	nottoohigh
   1422  20fa		       a5 a4		      lda	P0Bottom
   1423  20fc		       85 cf		      sta	P0Top
   1424  20fe
   1425  20fe
   1426  20fe
   1427  20fe				   nottoohigh
   1428  20fe		       60		      rts
   1429  20ff
   1430  20ff							;-------------------------------------------------------------------------
   1431  20ff
   1432  20ff
   1433  20ff
   1434  20ff
   1435  20ff
   1436  20ff							;*************************************************************************
   1437  20ff
   1438  20ff							;-------------------------------------------------------------------------
   1439  20ff							;-------------------------Data Below--------------------------------------
   1440  20ff							;-------------------------------------------------------------------------
   1441  20ff
   1442  20ff				   MaskTable
   1443  20ff		       01 03 07 0f*	      .byte.b	1,3,7,15,31
   1444  2104
   1445  2104							; shove 6-digit score routine here
   1446  2104
   1447  2104				   sixdigscore
   1448  2104		       a9 00		      lda	#0
   1449  2106							;	sta COLUBK
   1450  2106		       85 0d		      sta	PF0
   1451  2108		       85 0e		      sta	PF1
   1452  210a		       85 0f		      sta	PF2
   1453  210c		       85 1f		      sta	ENABL
   1454  210e		       85 1d		      sta	ENAM0
   1455  2110		       85 1e		      sta	ENAM1
   1456  2112							;end of kernel here
   1457  2112
   1458  2112
   1459  2112							; 6 digit score routine
   1460  2112							; lda #0
   1461  2112							; sta PF1
   1462  2112							; sta PF2
   1463  2112							; tax
   1464  2112
   1465  2112		       85 02		      sta	WSYNC	;,x
   1466  2114
   1467  2114							;		  STA WSYNC ;first one, need one more
   1468  2114		       85 0b		      sta	REFP0
   1469  2116		       85 0c		      sta	REFP1
   1470  2118		       85 1b		      STA	GRP0
   1471  211a		       85 1c		      STA	GRP1
   1472  211c		       85 2b		      sta	HMCLR
   1473  211e
   1474  211e							; restore P0pointer
   1475  211e
   1476  211e		       a5 a2		      lda	player0pointer
   1477  2120		       18		      clc
   1478  2121		       65 8d		      adc	player0y
   1479  2123		       38		      sec
   1480  2124		       e5 b0		      sbc	player0height
   1481  2126		       85 a2		      sta	player0pointer
   1482  2128		       e6 8d		      inc	player0y
   1483  212a
   1484  212a				  -	      ifconst	vblank_time
   1485  212a				  -	      ifconst	screenheight
   1486  212a				  -	      if	screenheight == 84
   1487  212a				  -	      lda	#vblank_time+9+128+10
   1488  212a				  -	      else
   1489  212a				  -	      lda	#vblank_time+9+128+19
   1490  212a				  -	      endif
   1491  212a				  -	      else
   1492  212a				  -	      lda	#vblank_time+9+128
   1493  212a				  -	      endif
   1494  212a					      else
   1495  212a				  -	      ifconst	screenheight
   1496  212a				  -	      if	screenheight == 84
   1497  212a				  -	      lda	#52+128+10
   1498  212a				  -	      else
   1499  212a				  -	      lda	#52+128+19
   1500  212a				  -	      endif
   1501  212a					      else
   1502  212a		       a9 b4		      lda	#52+128
   1503  212c					      endif
   1504  212c					      endif
   1505  212c
   1506  212c		       8d 96 02 	      sta	TIM64T
   1507  212f				  -	      ifconst	minikernel
   1508  212f				  -	      jsr	minikernel
   1509  212f					      endif
   1510  212f				  -	      ifconst	noscore
   1511  212f				  -	      pla
   1512  212f				  -	      pla
   1513  212f				  -	      jmp	skipscore
   1514  212f					      endif
   1515  212f
   1516  212f							; score pointers contain:
   1517  212f							; score1-5: lo1,lo2,lo3,lo4,lo5,lo6
   1518  212f							; swap lo2->temp1
   1519  212f							; swap lo4->temp3
   1520  212f							; swap lo6->temp5
   1521  212f
   1522  212f		       a5 ca		      lda	scorepointers+5
   1523  2131		       85 cf		      sta	temp5
   1524  2133		       a5 c6		      lda	scorepointers+1
   1525  2135		       85 cb		      sta	temp1
   1526  2137		       a5 c8		      lda	scorepointers+3
   1527  2139		       85 cd		      sta	temp3
   1528  213b
   1529  213b		       a9 ff		      lda	#>scoretable
   1530  213d		       85 c6		      sta	scorepointers+1
   1531  213f		       85 c8		      sta	scorepointers+3
   1532  2141		       85 ca		      sta	scorepointers+5
   1533  2143		       85 cc		      sta	temp2
   1534  2145		       85 ce		      sta	temp4
   1535  2147		       85 d0		      sta	temp6
   1536  2149
   1537  2149		       60		      rts
   1538  214a
   1539  214a
   1540  214a
   1541  214a							;-------------------------------------------------------------------------
   1542  214a							;----------------------Kernel Routine-------------------------------------
   1543  214a							;-------------------------------------------------------------------------
   1544  214a
   1545  214a
   1546  214a							;-------------------------------------------------------------------------
   1547  214a							; repeat $f147-*
   1548  214a							; brk
   1549  214a							; repend
   1550  214a							;	org $F240
   1551  214a
   1552  214a				   SwitchDrawP0K1		;	72
   1553  214a		       a5 a4		      lda	P0Bottom
   1554  214c		       85 cf		      sta	P0Top	;+6	 2
   1555  214e		       4c 88 f1 	      jmp	BackFromSwitchDrawP0K1	;+3	 5
   1556  2151
   1557  2151				   WaitDrawP0K1 		;	74
      0  2151					      SLEEP	4	;+4	 2
      1  2151				   .CYCLES    SET	4
      2  2151
      3  2151				  -	      IF	.CYCLES < 2
      4  2151				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2151				  -	      ERR
      6  2151					      ENDIF
      7  2151
      8  2151				  -	      IF	.CYCLES & 1
      9  2151				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  2151				  -	      nop	0
     11  2151				  -	      ELSE
     12  2151				  -	      bit	VSYNC
     13  2151				  -	      ENDIF
     14  2151				  -.CYCLES    SET	.CYCLES - 3
     15  2151					      ENDIF
     16  2151
     17  2151					      REPEAT	.CYCLES / 2
     18  2151		       ea		      nop
     17  2151					      REPEND
     18  2152		       ea		      nop
     19  2153					      REPEND
   1559  2153		       4c 88 f1 	      jmp	BackFromSwitchDrawP0K1	;+3	 5
   1560  2156
   1561  2156				   SkipDrawP1K1 		;	11
   1562  2156		       a9 00		      lda	#0
   1563  2158		       85 1c		      sta	GRP1	;+5	16	so Ball gets drawn
   1564  215a		       4c 91 f1 	      jmp	BackFromSkipDrawP1	;+3	19
   1565  215d
   1566  215d							;-------------------------------------------------------------------------
   1567  215d
   1568  215d				   KernelRoutine
   1569  215d					      ifnconst	screenheight
      0  215d					      sleep	12
      1  215d				   .CYCLES    SET	12
      2  215d
      3  215d				  -	      IF	.CYCLES < 2
      4  215d				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  215d				  -	      ERR
      6  215d					      ENDIF
      7  215d
      8  215d				  -	      IF	.CYCLES & 1
      9  215d				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  215d				  -	      nop	0
     11  215d				  -	      ELSE
     12  215d				  -	      bit	VSYNC
     13  215d				  -	      ENDIF
     14  215d				  -.CYCLES    SET	.CYCLES - 3
     15  215d					      ENDIF
     16  215d
     17  215d					      REPEAT	.CYCLES / 2
     18  215d		       ea		      nop
     17  215d					      REPEND
     18  215e		       ea		      nop
     17  215e					      REPEND
     18  215f		       ea		      nop
     17  215f					      REPEND
     18  2160		       ea		      nop
     17  2160					      REPEND
     18  2161		       ea		      nop
     17  2161					      REPEND
     18  2162		       ea		      nop
     19  2163					      REPEND
   1571  2163							; jsr wastetime ; waste 12 cycles
   1572  2163				  -	      else
   1573  2163				  -	      sleep	6
   1574  2163					      endif
   1575  2163		       ba		      tsx
   1576  2164		       86 f6		      stx	stack1
   1577  2166		       a2 1f		      ldx	#ENABL
   1578  2168		       9a		      txs		;+9	 9
   1579  2169
   1580  2169		       a2 00		      ldx	#0
   1581  216b		       a5 c4		      lda	pfheight
   1582  216d		       10 01		      bpl	asdhj
   1583  216f		       24		      .byte.b	$24
   1584  2170				   asdhj
   1585  2170		       aa		      tax
   1586  2171
   1587  2171							; ldx pfheight
   1588  2171		       bd 0f f0 	      lda	PFStart,x	; get pf pixel resolution for heights 15,7,3,1,0
   1589  2174
   1590  2174				  -	      ifconst	screenheight
   1591  2174				  -	      sec
   1592  2174				  -	      if	screenheight == 84
   1593  2174				  -	      sbc	pfsub+1,x
   1594  2174				  -	      else
   1595  2174				  -	      sbc	pfsub,x
   1596  2174				  -	      endif
   1597  2174					      endif
   1598  2174
   1599  2174		       85 ba		      sta	pfpixelheight
   1600  2176
   1601  2176				  -	      ifconst	screenheight
   1602  2176				  -	      ldy	#screenheight
   1603  2176					      else
   1604  2176		       a0 58		      ldy	#88
   1605  2178					      endif
   1606  2178
   1607  2178							;	lda #$02
   1608  2178							;	sta COLUBK		;+5	18
   1609  2178
   1610  2178							; sleep 25
      0  2178					      sleep	2
      1  2178				   .CYCLES    SET	2
      2  2178
      3  2178				  -	      IF	.CYCLES < 2
      4  2178				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2178				  -	      ERR
      6  2178					      ENDIF
      7  2178
      8  2178				  -	      IF	.CYCLES & 1
      9  2178				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  2178				  -	      nop	0
     11  2178				  -	      ELSE
     12  2178				  -	      bit	VSYNC
     13  2178				  -	      ENDIF
     14  2178				  -.CYCLES    SET	.CYCLES - 3
     15  2178					      ENDIF
     16  2178
     17  2178					      REPEAT	.CYCLES / 2
     18  2178		       ea		      nop
     19  2179					      REPEND
   1612  2179				   KernelLoopa		;	50
      0  2179					      SLEEP	7	;+4	54
      1  2179				   .CYCLES    SET	7
      2  2179
      3  2179				  -	      IF	.CYCLES < 2
      4  2179				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2179				  -	      ERR
      6  2179					      ENDIF
      7  2179
      8  2179					      IF	.CYCLES & 1
      9  2179					      IFNCONST	NO_ILLEGAL_OPCODES
     10  2179		       04 00		      nop	0
     11  217b				  -	      ELSE
     12  217b				  -	      bit	VSYNC
     13  217b					      ENDIF
     14  217b				   .CYCLES    SET	.CYCLES - 3
     15  217b					      ENDIF
     16  217b
     17  217b					      REPEAT	.CYCLES / 2
     18  217b		       ea		      nop
     17  217b					      REPEND
     18  217c		       ea		      nop
     19  217d					      REPEND
   1614  217d				   KernelLoopb		;	54
      0  217d					      SLEEP	2	;+12	66
      1  217d				   .CYCLES    SET	2
      2  217d
      3  217d				  -	      IF	.CYCLES < 2
      4  217d				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  217d				  -	      ERR
      6  217d					      ENDIF
      7  217d
      8  217d				  -	      IF	.CYCLES & 1
      9  217d				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  217d				  -	      nop	0
     11  217d				  -	      ELSE
     12  217d				  -	      bit	VSYNC
     13  217d				  -	      ENDIF
     14  217d				  -.CYCLES    SET	.CYCLES - 3
     15  217d					      ENDIF
     16  217d
     17  217d					      REPEAT	.CYCLES / 2
     18  217d		       ea		      nop
     19  217e					      REPEND
   1616  217e		       c4 cf		      cpy	P0Top	;+3	69
   1617  2180		       f0 c8		      beq	SwitchDrawP0K1	;+2	71
   1618  2182		       10 cd		      bpl	WaitDrawP0K1	;+2	73
   1619  2184		       b1 a2		      lda	(player0pointer),Y	;+5	 2
   1620  2186		       85 1b		      sta	GRP0	;+3	 5	VDEL because of repokernel
   1621  2188				   BackFromSwitchDrawP0K1
   1622  2188
   1623  2188		       c4 a5		      cpy	P1Bottom	;+3	 8	unless we mean to draw immediately, this should be set
   1624  218a							;		to a value greater than maximum Y value initially
   1625  218a		       90 ca		      bcc	SkipDrawP1K1	;+2	10
   1626  218c		       b1 cc		      lda	(P1display),Y	;+5	15
   1627  218e		       8d 1c 00 	      sta.w	GRP1	;+4	19
   1628  2191				   BackFromSkipDrawP1
   1629  2191
   1630  2191							;fuck	
   1631  2191		       84 cb		      sty	temp1
   1632  2193		       a4 ba		      ldy	pfpixelheight
   1633  2195		       b3 bb		      lax	(PF1pointer),y
   1634  2197		       86 0e		      stx	PF1	;+7	26
   1635  2199		       b1 bd		      lda	(PF2pointer),y
   1636  219b		       85 0f		      sta	PF2	;+7	33
   1637  219d							;sleep 6
   1638  219d		       86 b7		      stx	PF1temp2
   1639  219f		       85 b9		      sta	PF2temp2
   1640  21a1		       88		      dey
   1641  21a2		       30 35		      bmi	pagewraphandler
   1642  21a4		       b1 bb		      lda	(PF1pointer),y
   1643  21a6				   cyclebalance
   1644  21a6		       85 b6		      sta	PF1temp1
   1645  21a8		       b1 bd		      lda	(PF2pointer),y
   1646  21aa		       85 b8		      sta	PF2temp1
   1647  21ac		       a4 cb		      ldy	temp1
   1648  21ae
   1649  21ae		       a2 1f		      ldx	#ENABL
   1650  21b0		       9a		      txs
   1651  21b1		       c4 8c		      cpy	bally
   1652  21b3		       08		      php		;+6	39	VDEL ball
   1653  21b4
   1654  21b4
   1655  21b4		       c4 8b		      cpy	missile1y
   1656  21b6		       08		      php		;+6	71
   1657  21b7
   1658  21b7		       c4 8a		      cpy	missile0y
   1659  21b9		       08		      php		;+6	 1
   1660  21ba
   1661  21ba
   1662  21ba		       88		      dey		;+2	15
   1663  21bb
   1664  21bb		       c4 ce		      cpy	RepoLine	;+3	18
   1665  21bd		       f0 62		      beq	RepoKernel	;+2	20
   1666  21bf							;	SLEEP 20		;+23	43
      0  21bf					      sleep	6
      1  21bf				   .CYCLES    SET	6
      2  21bf
      3  21bf				  -	      IF	.CYCLES < 2
      4  21bf				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  21bf				  -	      ERR
      6  21bf					      ENDIF
      7  21bf
      8  21bf				  -	      IF	.CYCLES & 1
      9  21bf				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  21bf				  -	      nop	0
     11  21bf				  -	      ELSE
     12  21bf				  -	      bit	VSYNC
     13  21bf				  -	      ENDIF
     14  21bf				  -.CYCLES    SET	.CYCLES - 3
     15  21bf					      ENDIF
     16  21bf
     17  21bf					      REPEAT	.CYCLES / 2
     18  21bf		       ea		      nop
     17  21bf					      REPEND
     18  21c0		       ea		      nop
     17  21c0					      REPEND
     18  21c1		       ea		      nop
     19  21c2					      REPEND
   1668  21c2
   1669  21c2				   newrepo		; since we have time here, store next repoline
   1670  21c2		       a6 83		      ldx	SpriteIndex
   1671  21c4		       b5 9c		      lda	SpriteGfxIndex-1,x
   1672  21c6		       aa		      tax
   1673  21c7		       b5 8e		      lda	NewSpriteY,x
   1674  21c9		       85 d0		      sta	temp6
      0  21cb					      sleep	4
      1  21cb				   .CYCLES    SET	4
      2  21cb
      3  21cb				  -	      IF	.CYCLES < 2
      4  21cb				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  21cb				  -	      ERR
      6  21cb					      ENDIF
      7  21cb
      8  21cb				  -	      IF	.CYCLES & 1
      9  21cb				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  21cb				  -	      nop	0
     11  21cb				  -	      ELSE
     12  21cb				  -	      bit	VSYNC
     13  21cb				  -	      ENDIF
     14  21cb				  -.CYCLES    SET	.CYCLES - 3
     15  21cb					      ENDIF
     16  21cb
     17  21cb					      REPEAT	.CYCLES / 2
     18  21cb		       ea		      nop
     17  21cb					      REPEND
     18  21cc		       ea		      nop
     19  21cd					      REPEND
   1676  21cd
   1677  21cd				   BackFromRepoKernel
   1678  21cd		       98		      tya		;+2	45
   1679  21ce		       25 c4		      and	pfheight	;+2	47
   1680  21d0		       d0 a7		      bne	KernelLoopa	;+2	49
   1681  21d2		       c6 ba		      dec	pfpixelheight
   1682  21d4		       10 a7		      bpl	KernelLoopb	;+3	54
   1683  21d6							;	bmi donewkernel		;+3	54
   1684  21d6							;	bne KernelLoopb+1		;+3	54
   1685  21d6
   1686  21d6				   donewkernel
   1687  21d6		       4c e0 f2 	      jmp	DoneWithKernel	;+3	56
   1688  21d9
   1689  21d9				   pagewraphandler
   1690  21d9		       4c a6 f1 	      jmp	cyclebalance
   1691  21dc
   1692  21dc							;-------------------------------------------------------------------------
   1693  21dc
   1694  21dc							; room here for score?
   1695  21dc
   1696  21dc				   setscorepointers
   1697  21dc		       a7 d4		      lax	score+2
   1698  21de		       20 f8 f1 	      jsr	scorepointerset
   1699  21e1		       84 ca		      sty	scorepointers+5
   1700  21e3		       86 c7		      stx	scorepointers+2
   1701  21e5		       a7 d3		      lax	score+1
   1702  21e7		       20 f8 f1 	      jsr	scorepointerset
   1703  21ea		       84 c9		      sty	scorepointers+4
   1704  21ec		       86 c6		      stx	scorepointers+1
   1705  21ee		       a7 d2		      lax	score
   1706  21f0		       20 f8 f1 	      jsr	scorepointerset
   1707  21f3		       84 c8		      sty	scorepointers+3
   1708  21f5		       86 c5		      stx	scorepointers
   1709  21f7				   wastetime
   1710  21f7		       60		      rts
   1711  21f8
   1712  21f8				   scorepointerset
   1713  21f8		       29 0f		      and	#$0F
   1714  21fa		       0a		      asl
   1715  21fb		       0a		      asl
   1716  21fc		       0a		      asl
   1717  21fd		       69 74		      adc	#<scoretable
   1718  21ff		       a8		      tay
   1719  2200		       8a		      txa
   1720  2201		       29 f0		      and	#$F0
   1721  2203		       4a		      lsr
   1722  2204		       69 74		      adc	#<scoretable
   1723  2206		       aa		      tax
   1724  2207		       60		      rts
   1725  2208							;	align 256
   1726  2208
   1727  2208				   SwitchDrawP0KR		;	45
   1728  2208		       a5 a4		      lda	P0Bottom
   1729  220a		       85 cf		      sta	P0Top	;+6	51
   1730  220c		       4c 33 f2 	      jmp	BackFromSwitchDrawP0KR	;+3	54
   1731  220f
   1732  220f				   WaitDrawP0KR 		;	47
      0  220f					      SLEEP	4	;+4	51
      1  220f				   .CYCLES    SET	4
      2  220f
      3  220f				  -	      IF	.CYCLES < 2
      4  220f				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  220f				  -	      ERR
      6  220f					      ENDIF
      7  220f
      8  220f				  -	      IF	.CYCLES & 1
      9  220f				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  220f				  -	      nop	0
     11  220f				  -	      ELSE
     12  220f				  -	      bit	VSYNC
     13  220f				  -	      ENDIF
     14  220f				  -.CYCLES    SET	.CYCLES - 3
     15  220f					      ENDIF
     16  220f
     17  220f					      REPEAT	.CYCLES / 2
     18  220f		       ea		      nop
     17  220f					      REPEND
     18  2210		       ea		      nop
     19  2211					      REPEND
   1734  2211		       4c 33 f2 	      jmp	BackFromSwitchDrawP0KR	;+3	54
   1735  2214
   1736  2214							;-----------------------------------------------------------
   1737  2214
   1738  2214				   noUpdateXKR
   1739  2214		       a2 01		      ldx	#1
   1740  2216		       cc cf 00 	      cpy.w	P0Top
   1741  2219		       4c 2b f2 	      JMP	retXKR
   1742  221c
   1743  221c				   skipthis
   1744  221c		       a2 01		      ldx	#1
   1745  221e		       4c 6d f2 	      jmp	goback
   1746  2221
   1747  2221				   RepoKernel		;	22	crosses page boundary
   1748  2221		       98		      tya
   1749  2222		       25 c4		      and	pfheight	;+2	26
   1750  2224		       d0 ee		      bne	noUpdateXKR	;+2	28
   1751  2226		       aa		      tax
   1752  2227							;	dex			;+2	30
   1753  2227		       c6 ba		      dec	pfpixelheight
   1754  2229							;	stx Temp		;+3	35
   1755  2229							;	SLEEP 3
   1756  2229
   1757  2229		       c4 cf		      cpy	P0Top	;+3	42
   1758  222b				   retXKR
   1759  222b		       f0 db		      beq	SwitchDrawP0KR	;+2	44
   1760  222d		       10 e0		      bpl	WaitDrawP0KR	;+2	46
   1761  222f		       b1 a2		      lda	(player0pointer),Y	;+5	51
   1762  2231		       85 1b		      sta	GRP0	;+3	54	VDEL
   1763  2233				   BackFromSwitchDrawP0KR
   1764  2233		       38		      sec		;+2	56
   1765  2234
   1766  2234
   1767  2234
   1768  2234		       b5 b8		      lda	PF2temp1,X
   1769  2236		       b4 b6		      ldy	PF1temp1,X
   1770  2238
   1771  2238		       a6 83		      ldx	SpriteIndex	;+3	 2
   1772  223a
   1773  223a		       85 0f		      sta	PF2	;+7	63
   1774  223c
   1775  223c		       b5 9d		      lda	SpriteGfxIndex,x
   1776  223e		       84 0e		      sty	PF1	;+7	70	too early?
   1777  2240		       aa		      tax
   1778  2241		       a9 00		      lda	#0
   1779  2243		       85 1c		      sta	GRP1	;+5	75	to display player 0
   1780  2245		       b5 85		      lda	NewSpriteX,X	;+4	 6
   1781  2247
   1782  2247				   DivideBy15LoopK		;	 6	(carry set above)
   1783  2247		       e9 0f		      sbc	#15
   1784  2249		       b0 fc		      bcs	DivideBy15LoopK	;+4/5	10/15.../60
   1785  224b
   1786  224b		       aa		      tax		;+2	12/17/...62
   1787  224c		       bd 0f ef 	      lda	FineAdjustTableEnd,X	;+5	17/22/...67
   1788  224f
   1789  224f		       85 21		      sta	HMP1	;+3	20/25/...70
   1790  2251		       85 11		      sta	RESP1	;+3	23/28/33/38/43/48/53/58/63/68/73
   1791  2253		       85 02		      sta	WSYNC	;+3	 0	begin line 2
   1792  2255							;sta HMOVE			;+3	 3
   1793  2255
   1794  2255		       a2 1f		      ldx	#ENABL
   1795  2257		       9a		      txs		;+4	25
   1796  2258		       a4 ce		      ldy	RepoLine	; restore y
   1797  225a		       c4 8c		      cpy	bally
   1798  225c		       08		      php		;+6	 9	VDEL ball
   1799  225d
   1800  225d		       c4 8b		      cpy	missile1y
   1801  225f		       08		      php		;+6	15
   1802  2260
   1803  2260		       c4 8a		      cpy	missile0y
   1804  2262		       08		      php		;+6	21
   1805  2263
   1806  2263
   1807  2263
   1808  2263
   1809  2263
   1810  2263							;15 cycles
   1811  2263		       98		      tya
   1812  2264		       25 c4		      and	pfheight
   1813  2266							;eor #1
   1814  2266		       29 fe		      and	#$FE
   1815  2268		       d0 b2		      bne	skipthis
   1816  226a		       aa		      tax
      0  226b					      sleep	4
      1  226b				   .CYCLES    SET	4
      2  226b
      3  226b				  -	      IF	.CYCLES < 2
      4  226b				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  226b				  -	      ERR
      6  226b					      ENDIF
      7  226b
      8  226b				  -	      IF	.CYCLES & 1
      9  226b				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  226b				  -	      nop	0
     11  226b				  -	      ELSE
     12  226b				  -	      bit	VSYNC
     13  226b				  -	      ENDIF
     14  226b				  -.CYCLES    SET	.CYCLES - 3
     15  226b					      ENDIF
     16  226b
     17  226b					      REPEAT	.CYCLES / 2
     18  226b		       ea		      nop
     17  226b					      REPEND
     18  226c		       ea		      nop
     19  226d					      REPEND
   1818  226d							;	sleep 2
   1819  226d				   goback
   1820  226d
   1821  226d		       88		      dey
   1822  226e		       c4 cf		      cpy	P0Top	;+3	52
   1823  2270		       f0 62		      beq	SwitchDrawP0KV	;+2	54
   1824  2272		       10 67		      bpl	WaitDrawP0KV	;+2	56
   1825  2274		       b1 a2		      lda	(player0pointer),Y	;+5	61
   1826  2276		       85 1b		      sta	GRP0	;+3	64	VDEL
   1827  2278				   BackFromSwitchDrawP0KV
   1828  2278
   1829  2278							; sleep 3
   1830  2278
   1831  2278		       b5 b8		      lda	PF2temp1,X
   1832  227a		       85 0f		      sta	PF2	;+7	 5
   1833  227c		       b5 b6		      lda	PF1temp1,X
   1834  227e		       85 0e		      sta	PF1	;+7	74 
   1835  2280		       85 2a		      sta	HMOVE
   1836  2282
   1837  2282		       a9 00		      lda	#0
   1838  2284		       85 1c		      sta	GRP1	;+5	10	to display GRP0
   1839  2286
   1840  2286		       a2 1f		      ldx	#ENABL
   1841  2288		       9a		      txs		;+4	 8
   1842  2289
   1843  2289		       a6 83		      ldx	SpriteIndex	;+3	13	restore index into new sprite vars
   1844  228b							;--now, set all new variables and return to main kernel loop
   1845  228b
   1846  228b
   1847  228b							;
   1848  228b		       b5 9d		      lda	SpriteGfxIndex,X	;+4	31
   1849  228d		       aa		      tax		;+2	33
   1850  228e							;
   1851  228e
   1852  228e
   1853  228e
   1854  228e		       b5 93		      lda	NewNUSIZ,X
   1855  2290		       85 05		      sta	NUSIZ1	;+7	20
   1856  2292		       85 0c		      sta	REFP1
   1857  2294		       b5 98		      lda	NewCOLUP1,X
   1858  2296		       85 07		      sta	COLUP1	;+7	27
   1859  2298
   1860  2298							;	lda SpriteGfxIndex,X	;+4	31
   1861  2298							;	tax				;+2	33
   1862  2298							;fuck2
   1863  2298		       b5 8e		      lda	NewSpriteY,X	;+4	46
   1864  229a		       38		      sec		;+2	38
   1865  229b		       f5 b1		      sbc	spriteheight,X	;+4	42
   1866  229d		       85 a5		      sta	P1Bottom	;+3	45
   1867  229f
      0  229f					      sleep	6
      1  229f				   .CYCLES    SET	6
      2  229f
      3  229f				  -	      IF	.CYCLES < 2
      4  229f				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  229f				  -	      ERR
      6  229f					      ENDIF
      7  229f
      8  229f				  -	      IF	.CYCLES & 1
      9  229f				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  229f				  -	      nop	0
     11  229f				  -	      ELSE
     12  229f				  -	      bit	VSYNC
     13  229f				  -	      ENDIF
     14  229f				  -.CYCLES    SET	.CYCLES - 3
     15  229f					      ENDIF
     16  229f
     17  229f					      REPEAT	.CYCLES / 2
     18  229f		       ea		      nop
     17  229f					      REPEND
     18  22a0		       ea		      nop
     17  22a0					      REPEND
     18  22a1		       ea		      nop
     19  22a2					      REPEND
   1869  22a2		       b5 a6		      lda	player1pointerlo,X	;+4	49
   1870  22a4		       e5 a5		      sbc	P1Bottom	;+3	52	carry should still be set
   1871  22a6		       85 cc		      sta	P1display	;+3	55
   1872  22a8		       b5 ab		      lda	player1pointerhi,X
   1873  22aa		       85 cd		      sta	P1display+1	;+7	62
   1874  22ac
   1875  22ac
   1876  22ac		       c4 8c		      cpy	bally
   1877  22ae		       08		      php		;+6	68	VDELed
   1878  22af
   1879  22af		       c4 8b		      cpy	missile1y
   1880  22b1		       08		      php		;+6	74
   1881  22b2
   1882  22b2		       c4 8a		      cpy	missile0y
   1883  22b4		       08		      php		;+6	 4
   1884  22b5
   1885  22b5
   1886  22b5
   1887  22b5							; lda SpriteGfxIndex-1,x
   1888  22b5							; sleep 3
   1889  22b5		       c6 83		      dec	SpriteIndex	;+5	13
   1890  22b7							; tax
   1891  22b7							; lda NewSpriteY,x
   1892  22b7							; sta RepoLine
   1893  22b7
   1894  22b7							; 10 cycles below...
   1895  22b7		       10 05		      bpl	SetNextLine
   1896  22b9		       a9 ff		      lda	#255
   1897  22bb		       4c c1 f2 	      jmp	SetLastLine
   1898  22be				   SetNextLine
   1899  22be							;	lda NewSpriteY-1,x
   1900  22be		       ad d0 00 	      lda.w	temp6
   1901  22c1				   SetLastLine
   1902  22c1		       85 ce		      sta	RepoLine
   1903  22c3
   1904  22c3		       98		      tya
   1905  22c4		       25 c4		      and	pfheight
   1906  22c6		       d0 06		      bne	nodec
   1907  22c8		       c6 ba		      dec	pfpixelheight
   1908  22ca		       88		      dey		;+2	30
   1909  22cb
   1910  22cb							; 10 cycles 
   1911  22cb
   1912  22cb
   1913  22cb		       4c cd f1 	      jmp	BackFromRepoKernel	;+3	43
   1914  22ce
   1915  22ce				   nodec
      0  22ce					      sleep	4
      1  22ce				   .CYCLES    SET	4
      2  22ce
      3  22ce				  -	      IF	.CYCLES < 2
      4  22ce				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  22ce				  -	      ERR
      6  22ce					      ENDIF
      7  22ce
      8  22ce				  -	      IF	.CYCLES & 1
      9  22ce				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  22ce				  -	      nop	0
     11  22ce				  -	      ELSE
     12  22ce				  -	      bit	VSYNC
     13  22ce				  -	      ENDIF
     14  22ce				  -.CYCLES    SET	.CYCLES - 3
     15  22ce					      ENDIF
     16  22ce
     17  22ce					      REPEAT	.CYCLES / 2
     18  22ce		       ea		      nop
     17  22ce					      REPEND
     18  22cf		       ea		      nop
     19  22d0					      REPEND
   1917  22d0		       88		      dey
   1918  22d1		       4c cd f1 	      jmp	BackFromRepoKernel
   1919  22d4
   1920  22d4							;-------------------------------------------------------------------------
   1921  22d4
   1922  22d4
   1923  22d4				   SwitchDrawP0KV		;	69
   1924  22d4		       a5 a4		      lda	P0Bottom
   1925  22d6		       85 cf		      sta	P0Top	;+6	75
   1926  22d8		       4c 78 f2 	      jmp	BackFromSwitchDrawP0KV	;+3	 2
   1927  22db
   1928  22db				   WaitDrawP0KV 		;	71
      0  22db					      SLEEP	4	;+4	75
      1  22db				   .CYCLES    SET	4
      2  22db
      3  22db				  -	      IF	.CYCLES < 2
      4  22db				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  22db				  -	      ERR
      6  22db					      ENDIF
      7  22db
      8  22db				  -	      IF	.CYCLES & 1
      9  22db				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  22db				  -	      nop	0
     11  22db				  -	      ELSE
     12  22db				  -	      bit	VSYNC
     13  22db				  -	      ENDIF
     14  22db				  -.CYCLES    SET	.CYCLES - 3
     15  22db					      ENDIF
     16  22db
     17  22db					      REPEAT	.CYCLES / 2
     18  22db		       ea		      nop
     17  22db					      REPEND
     18  22dc		       ea		      nop
     19  22dd					      REPEND
   1930  22dd		       4c 78 f2 	      jmp	BackFromSwitchDrawP0KV	;+3	 2
   1931  22e0
   1932  22e0							;-------------------------------------------------------------------------
   1933  22e0
   1934  22e0				   DoneWithKernel
   1935  22e0
   1936  22e0				   BottomOfKernelLoop
   1937  22e0
   1938  22e0		       85 02		      sta	WSYNC
   1939  22e2		       a6 f6		      ldx	stack1
   1940  22e4		       9a		      txs
   1941  22e5		       20 04 f1 	      jsr	sixdigscore	; set up score
   1942  22e8
   1943  22e8
   1944  22e8		       85 02		      sta	WSYNC
   1945  22ea		       a2 00		      ldx	#0
   1946  22ec		       85 2b		      sta	HMCLR
   1947  22ee		       86 1b		      STx	GRP0
   1948  22f0		       86 1c		      STx	GRP1	; seems to be needed because of vdel
   1949  22f2
   1950  22f2		       a0 07		      LDY	#7
   1951  22f4		       84 25		      STy	VDELP0
   1952  22f6		       84 26		      STy	VDELP1
   1953  22f8		       a9 10		      LDA	#$10
   1954  22fa		       85 21		      STA	HMP1
   1955  22fc		       a5 d5		      LDA	scorecolor
   1956  22fe		       85 06		      STA	COLUP0
   1957  2300		       85 07		      STA	COLUP1
   1958  2302
   1959  2302		       a9 03		      LDA	#$03
   1960  2304		       85 04		      STA	NUSIZ0
   1961  2306		       85 05		      STA	NUSIZ1
   1962  2308
   1963  2308		       85 10		      STA	RESP0
   1964  230a		       85 11		      STA	RESP1
   1965  230c
      0  230c					      sleep	9
      1  230c				   .CYCLES    SET	9
      2  230c
      3  230c				  -	      IF	.CYCLES < 2
      4  230c				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  230c				  -	      ERR
      6  230c					      ENDIF
      7  230c
      8  230c					      IF	.CYCLES & 1
      9  230c					      IFNCONST	NO_ILLEGAL_OPCODES
     10  230c		       04 00		      nop	0
     11  230e				  -	      ELSE
     12  230e				  -	      bit	VSYNC
     13  230e					      ENDIF
     14  230e				   .CYCLES    SET	.CYCLES - 3
     15  230e					      ENDIF
     16  230e
     17  230e					      REPEAT	.CYCLES / 2
     18  230e		       ea		      nop
     17  230e					      REPEND
     18  230f		       ea		      nop
     17  230f					      REPEND
     18  2310		       ea		      nop
     19  2311					      REPEND
   1967  2311		       b1 c5		      lda	(scorepointers),y
   1968  2313		       85 1b		      sta	GRP0
   1969  2315				  -	      ifconst	pfscore
   1970  2315				  -	      lda	pfscorecolor
   1971  2315				  -	      sta	COLUPF
   1972  2315					      else
      0  2315					      sleep	6
      1  2315				   .CYCLES    SET	6
      2  2315
      3  2315				  -	      IF	.CYCLES < 2
      4  2315				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2315				  -	      ERR
      6  2315					      ENDIF
      7  2315
      8  2315				  -	      IF	.CYCLES & 1
      9  2315				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  2315				  -	      nop	0
     11  2315				  -	      ELSE
     12  2315				  -	      bit	VSYNC
     13  2315				  -	      ENDIF
     14  2315				  -.CYCLES    SET	.CYCLES - 3
     15  2315					      ENDIF
     16  2315
     17  2315					      REPEAT	.CYCLES / 2
     18  2315		       ea		      nop
     17  2315					      REPEND
     18  2316		       ea		      nop
     17  2316					      REPEND
     18  2317		       ea		      nop
     19  2318					      REPEND
   1974  2318					      endif
   1975  2318
   1976  2318		       85 2a		      STA	HMOVE
   1977  231a		       b1 cd		      lda	(scorepointers+8),y
   1978  231c							; sta WSYNC
   1979  231c							;sleep 2
   1980  231c		       4c 29 f3 	      jmp	beginscore
   1981  231f
   1982  231f
   1983  231f				   loop2
   1984  231f		       b1 c5		      lda	(scorepointers),y	;+5  68  204
   1985  2321		       85 1b		      sta	GRP0	;+3  71  213	   D1	  --	  --	 --
   1986  2323				  -	      ifconst	pfscore
   1987  2323				  -	      lda.w	pfscore1
   1988  2323				  -	      sta	PF1
   1989  2323					      else
      0  2323					      sleep	7
      1  2323				   .CYCLES    SET	7
      2  2323
      3  2323				  -	      IF	.CYCLES < 2
      4  2323				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2323				  -	      ERR
      6  2323					      ENDIF
      7  2323
      8  2323					      IF	.CYCLES & 1
      9  2323					      IFNCONST	NO_ILLEGAL_OPCODES
     10  2323		       04 00		      nop	0
     11  2325				  -	      ELSE
     12  2325				  -	      bit	VSYNC
     13  2325					      ENDIF
     14  2325				   .CYCLES    SET	.CYCLES - 3
     15  2325					      ENDIF
     16  2325
     17  2325					      REPEAT	.CYCLES / 2
     18  2325		       ea		      nop
     17  2325					      REPEND
     18  2326		       ea		      nop
     19  2327					      REPEND
   1991  2327					      endif
   1992  2327							; cycle 0
   1993  2327		       b1 cd		      lda	(scorepointers+$8),y	;+5   5   15
   1994  2329				   beginscore
   1995  2329		       85 1c		      sta	GRP1	;+3   8   24	   D1	  D1	  D2	 --
   1996  232b		       b1 cb		      lda	(scorepointers+$6),y	;+5  13   39
   1997  232d		       85 1b		      sta	GRP0	;+3  16   48	   D3	  D1	  D2	 D2
   1998  232f		       b3 c7		      lax	(scorepointers+$2),y	;+5  29   87
   1999  2331		       9a		      txs
   2000  2332		       b3 c9		      lax	(scorepointers+$4),y	;+5  36  108
      0  2334					      sleep	3
      1  2334				   .CYCLES    SET	3
      2  2334
      3  2334				  -	      IF	.CYCLES < 2
      4  2334				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2334				  -	      ERR
      6  2334					      ENDIF
      7  2334
      8  2334					      IF	.CYCLES & 1
      9  2334					      IFNCONST	NO_ILLEGAL_OPCODES
     10  2334		       04 00		      nop	0
     11  2336				  -	      ELSE
     12  2336				  -	      bit	VSYNC
     13  2336					      ENDIF
     14  2336				   .CYCLES    SET	.CYCLES - 3
     15  2336					      ENDIF
     16  2336
     17  2336				  -	      REPEAT	.CYCLES / 2
     18  2336				  -	      nop
     19  2336					      REPEND
   2002  2336				  -	      ifconst	pfscore
   2003  2336				  -	      lda	pfscore2
   2004  2336				  -	      sta	PF1
   2005  2336					      else
      0  2336					      sleep	6
      1  2336				   .CYCLES    SET	6
      2  2336
      3  2336				  -	      IF	.CYCLES < 2
      4  2336				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2336				  -	      ERR
      6  2336					      ENDIF
      7  2336
      8  2336				  -	      IF	.CYCLES & 1
      9  2336				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  2336				  -	      nop	0
     11  2336				  -	      ELSE
     12  2336				  -	      bit	VSYNC
     13  2336				  -	      ENDIF
     14  2336				  -.CYCLES    SET	.CYCLES - 3
     15  2336					      ENDIF
     16  2336
     17  2336					      REPEAT	.CYCLES / 2
     18  2336		       ea		      nop
     17  2336					      REPEND
     18  2337		       ea		      nop
     17  2337					      REPEND
     18  2338		       ea		      nop
     19  2339					      REPEND
   2007  2339					      endif
   2008  2339		       b1 cf		      lda	(scorepointers+$A),y	;+5  21   63
   2009  233b		       86 1c		      stx	GRP1	;+3  44  132	   D3	  D3	  D4	 D2!
   2010  233d		       ba		      tsx
   2011  233e		       86 1b		      stx	GRP0	;+3  47  141	   D5	  D3!	  D4	 D4
   2012  2340		       85 1c		      sta	GRP1	;+3  50  150	   D5	  D5	  D6	 D4!
   2013  2342		       84 1b		      sty	GRP0	;+3  53  159	   D4*	  D5!	  D6	 D6
   2014  2344		       88		      dey
   2015  2345		       10 d8		      bpl	loop2	;+2  60  180
   2016  2347		       a6 f6		      ldx	stack1
   2017  2349		       9a		      txs
   2018  234a
   2019  234a
   2020  234a							; lda scorepointers+1
   2021  234a		       a4 cb		      ldy	temp1
   2022  234c							; sta temp1
   2023  234c		       84 c6		      sty	scorepointers+1
   2024  234e
   2025  234e		       a9 00		      LDA	#0
   2026  2350		       85 1b		      STA	GRP0
   2027  2352		       85 1c		      STA	GRP1
   2028  2354		       85 0e		      sta	PF1
   2029  2356		       85 25		      STA	VDELP0
   2030  2358		       85 26		      STA	VDELP1	;do we need these
   2031  235a		       85 04		      STA	NUSIZ0
   2032  235c		       85 05		      STA	NUSIZ1
   2033  235e
   2034  235e							; lda scorepointers+3
   2035  235e		       a4 cd		      ldy	temp3
   2036  2360							; sta temp3
   2037  2360		       84 c8		      sty	scorepointers+3
   2038  2362
   2039  2362							; lda scorepointers+5
   2040  2362		       a4 cf		      ldy	temp5
   2041  2364							; sta temp5
   2042  2364		       84 ca		      sty	scorepointers+5
   2043  2366
   2044  2366
   2045  2366							;-------------------------------------------------------------------------
   2046  2366							;------------------------Overscan Routine---------------------------------
   2047  2366							;-------------------------------------------------------------------------
   2048  2366
   2049  2366				   OverscanRoutine
   2050  2366
   2051  2366
   2052  2366
   2053  2366				   skipscore
   2054  2366		       a9 02		      lda	#2
   2055  2368		       85 02		      sta	WSYNC
   2056  236a		       85 01		      sta	VBLANK	;turn on VBLANK
   2057  236c
   2058  236c
   2059  236c
   2060  236c
   2061  236c
   2062  236c							;-------------------------------------------------------------------------
   2063  236c							;----------------------------End Main Routines----------------------------
   2064  236c							;-------------------------------------------------------------------------
   2065  236c
   2066  236c
   2067  236c							;*************************************************************************
   2068  236c
   2069  236c							;-------------------------------------------------------------------------
   2070  236c							;----------------------Begin Subroutines----------------------------------
   2071  236c							;-------------------------------------------------------------------------
   2072  236c
   2073  236c
   2074  236c
   2075  236c
   2076  236c				   KernelCleanupSubroutine
   2077  236c
   2078  236c		       a2 04		      ldx	#4
   2079  236e				   AdjustYValuesDownLoop
   2080  236e		       b5 8e		      lda	NewSpriteY,X
   2081  2370		       38		      sec
   2082  2371		       e9 02		      sbc	#2
   2083  2373		       95 8e		      sta	NewSpriteY,X
   2084  2375		       ca		      dex
   2085  2376		       10 f6		      bpl	AdjustYValuesDownLoop
   2086  2378
   2087  2378
      0  2378					      RETURN
      1  2378				  -	      ifnconst	bankswitch
      2  2378				  -	      rts
      3  2378					      else
      4  2378		       4c dd ff 	      jmp	BS_return
      5  237b					      endif
   2089  237b							;rts
   2090  237b
   2091  237b				   SetupP1Subroutine
   2092  237b							; flickersort algorithm
   2093  237b							; count 4-0
   2094  237b							; table2=table1 (?)
   2095  237b							; detect overlap of sprites in table 2
   2096  237b							; if overlap, do regular sort in table2, then place one sprite at top of table 1, decrement # displayed
   2097  237b							; if no overlap, do regular sort in table 2 and table 1
   2098  237b				   fsstart
   2099  237b		       a2 ff		      ldx	#255
   2100  237d				   copytable
   2101  237d		       e8		      inx
   2102  237e		       b5 f1		      lda	spritesort,x
   2103  2380		       95 9d		      sta	SpriteGfxIndex,x
   2104  2382		       e0 04		      cpx	#4
   2105  2384		       d0 f7		      bne	copytable
   2106  2386
   2107  2386		       86 cd		      stx	temp3	; highest displayed sprite
   2108  2388		       ca		      dex
   2109  2389		       86 cc		      stx	temp2
   2110  238b				   sortloop
   2111  238b		       a6 cc		      ldx	temp2
   2112  238d		       b5 f1		      lda	spritesort,x
   2113  238f		       aa		      tax
   2114  2390		       b5 8e		      lda	NewSpriteY,x
   2115  2392		       85 cb		      sta	temp1
   2116  2394
   2117  2394		       a6 cc		      ldx	temp2
   2118  2396		       b5 f2		      lda	spritesort+1,x
   2119  2398		       aa		      tax
   2120  2399		       b5 8e		      lda	NewSpriteY,x
   2121  239b		       38		      sec
   2122  239c		       18		      clc
   2123  239d		       e5 cb		      sbc	temp1
   2124  239f		       90 0e		      bcc	largerXislower
   2125  23a1
   2126  23a1							; larger x is higher (A>=temp1)
   2127  23a1		       d5 b1		      cmp	spriteheight,x
   2128  23a3		       b0 2f		      bcs	countdown
   2129  23a5							; overlap with x+1>x
   2130  23a5							; 
   2131  23a5							; stick x at end of gfxtable, dec counter
   2132  23a5				   overlapping
   2133  23a5		       c6 cd		      dec	temp3
   2134  23a7		       a6 cc		      ldx	temp2
   2135  23a9							; inx
   2136  23a9		       20 e8 f3 	      jsr	shiftnumbers
   2137  23ac		       4c ca f3 	      jmp	skipswapGfxtable
   2138  23af
   2139  23af				   largerXislower		; (temp1>A)
   2140  23af		       a8		      tay
   2141  23b0		       a6 cc		      ldx	temp2
   2142  23b2		       b5 f1		      lda	spritesort,x
   2143  23b4		       aa		      tax
   2144  23b5		       98		      tya
   2145  23b6		       49 ff		      eor	#$FF
   2146  23b8		       e9 01		      sbc	#1
   2147  23ba		       90 e9		      bcc	overlapping
   2148  23bc		       d5 b1		      cmp	spriteheight,x
   2149  23be		       b0 0a		      bcs	notoverlapping
   2150  23c0
   2151  23c0		       c6 cd		      dec	temp3
   2152  23c2		       a6 cc		      ldx	temp2
   2153  23c4							; inx
   2154  23c4		       20 e8 f3 	      jsr	shiftnumbers
   2155  23c7		       4c ca f3 	      jmp	skipswapGfxtable
   2156  23ca				   notoverlapping
   2157  23ca							; ldx temp2 ; swap display table
   2158  23ca							; ldy SpriteGfxIndex+1,x
   2159  23ca							; lda SpriteGfxIndex,x
   2160  23ca							; sty SpriteGfxIndex,x
   2161  23ca							; sta SpriteGfxIndex+1,x 
   2162  23ca
   2163  23ca				   skipswapGfxtable
   2164  23ca		       a6 cc		      ldx	temp2	; swap sort table
   2165  23cc		       b4 f2		      ldy	spritesort+1,x
   2166  23ce		       b5 f1		      lda	spritesort,x
   2167  23d0		       94 f1		      sty	spritesort,x
   2168  23d2		       95 f2		      sta	spritesort+1,x
   2169  23d4
   2170  23d4				   countdown
   2171  23d4		       c6 cc		      dec	temp2
   2172  23d6		       10 b3		      bpl	sortloop
   2173  23d8
   2174  23d8				   checktoohigh
   2175  23d8		       a6 cd		      ldx	temp3
   2176  23da		       b5 9d		      lda	SpriteGfxIndex,x
   2177  23dc		       aa		      tax
   2178  23dd		       b5 8e		      lda	NewSpriteY,x
   2179  23df				  -	      ifconst	screenheight
   2180  23df				  -	      cmp	#screenheight-3
   2181  23df					      else
   2182  23df		       c9 55		      cmp	#$55
   2183  23e1					      endif
   2184  23e1		       90 04		      bcc	nonetoohigh
   2185  23e3		       c6 cd		      dec	temp3
   2186  23e5		       d0 f1		      bne	checktoohigh
   2187  23e7
   2188  23e7				   nonetoohigh
   2189  23e7		       60		      rts
   2190  23e8
   2191  23e8
   2192  23e8				   shiftnumbers
   2193  23e8							; stick current x at end, shift others down
   2194  23e8							; if x=4: don't do anything
   2195  23e8							; if x=3: swap 3 and 4
   2196  23e8							; if x=2: 2=3, 3=4, 4=2
   2197  23e8							; if x=1: 1=2, 2=3, 3=4, 4=1
   2198  23e8							; if x=0: 0=1, 1=2, 2=3, 3=4, 4=0
   2199  23e8							; ldy SpriteGfxIndex,x
   2200  23e8				   swaploop
   2201  23e8		       e0 04		      cpx	#4
   2202  23ea		       f0 08		      beq	shiftdone
   2203  23ec		       b5 9e		      lda	SpriteGfxIndex+1,x
   2204  23ee		       95 9d		      sta	SpriteGfxIndex,x
   2205  23f0		       e8		      inx
   2206  23f1		       4c e8 f3 	      jmp	swaploop
   2207  23f4				   shiftdone
   2208  23f4							; sty SpriteGfxIndex,x
   2209  23f4		       60		      rts
   2210  23f5
   2211  23f5				  -	      ifconst	debugscore
   2212  23f5				  -debugcycles
   2213  23f5				  -	      ldx	#14
   2214  23f5				  -	      lda	INTIM	; display # cycles left in the score
   2215  23f5				  -
   2216  23f5				  -	      ifconst	mincycles
   2217  23f5				  -	      lda	mincycles
   2218  23f5				  -	      cmp	INTIM
   2219  23f5				  -	      lda	mincycles
   2220  23f5				  -	      bcc	nochange
   2221  23f5				  -	      lda	INTIM
   2222  23f5				  -	      sta	mincycles
   2223  23f5				  -nochange
   2224  23f5				  -	      endif
   2225  23f5				  -
   2226  23f5				  -			;   cmp #$2B
   2227  23f5				  -			;   bcs no_cycles_left
   2228  23f5				  -	      bmi	cycles_left
   2229  23f5				  -	      ldx	#64
   2230  23f5				  -	      eor	#$ff	;make negative
   2231  23f5				  -cycles_left
   2232  23f5				  -	      stx	scorecolor
   2233  23f5				  -	      and	#$7f	; clear sign bit
   2234  23f5				  -	      tax
   2235  23f5				  -	      lda	scorebcd,x
   2236  23f5				  -	      sta	score+2
   2237  23f5				  -	      lda	scorebcd1,x
   2238  23f5				  -	      sta	score+1
   2239  23f5				  -	      rts
   2240  23f5				  -scorebcd
   2241  23f5				  -	      .byte	$00, $64, $28, $92, $56, $20, $84, $48, $12, $76, $40
   2242  23f5				  -	      .byte	$04, $68, $32, $96, $60, $24, $88, $52, $16, $80, $44
   2243  23f5				  -	      .byte	$08, $72, $36, $00, $64, $28, $92, $56, $20, $84, $48
   2244  23f5				  -	      .byte	$12, $76, $40, $04, $68, $32, $96, $60, $24, $88
   2245  23f5				  -scorebcd1
   2246  23f5				  -	      .byte	0, 0, 1, 1, 2, 3, 3, 4, 5, 5, 6
   2247  23f5				  -	      .byte	7, 7, 8, 8, 9, $10, $10, $11, $12, $12, $13
   2248  23f5				  -	      .byte	$14, $14, $15, $16, $16, $17, $17, $18, $19, $19, $20
   2249  23f5				  -	      .byte	$21, $21, $22, $23, $23, $24, $24, $25, $26, $26
   2250  23f5					      endif
   2251  23f5							; Provided under the CC0 license. See the included LICENSE.txt for details.
   2252  23f5
   2253  23f5				   start
   2254  23f5		       78		      sei
   2255  23f6		       d8		      cld
   2256  23f7		       a0 00		      ldy	#0
   2257  23f9		       a5 d0		      lda	$D0
   2258  23fb		       c9 2c		      cmp	#$2C	;check RAM location #1
   2259  23fd		       d0 07		      bne	MachineIs2600
   2260  23ff		       a5 d1		      lda	$D1
   2261  2401		       c9 a9		      cmp	#$A9	;check RAM location #2
   2262  2403		       d0 01		      bne	MachineIs2600
   2263  2405		       88		      dey
   2264  2406				   MachineIs2600
   2265  2406		       a2 00		      ldx	#0
   2266  2408		       8a		      txa
   2267  2409				   clearmem
   2268  2409		       e8		      inx
   2269  240a		       9a		      txs
   2270  240b		       48		      pha
   2271  240c		       d0 fb		      bne	clearmem
   2272  240e		       84 cb		      sty	temp1
   2273  2410				  -	      ifnconst	multisprite
   2274  2410				  -	      ifconst	pfrowheight
   2275  2410				  -	      lda	#pfrowheight
   2276  2410				  -	      else
   2277  2410				  -	      ifconst	pfres
   2278  2410				  -	      lda	#(96/pfres)
   2279  2410				  -	      else
   2280  2410				  -	      lda	#8
   2281  2410				  -	      endif
   2282  2410				  -	      endif
   2283  2410				  -	      sta	playfieldpos
   2284  2410					      endif
   2285  2410		       a2 05		      ldx	#5
   2286  2412				   initscore
   2287  2412		       a9 74		      lda	#<scoretable
   2288  2414		       95 c5		      sta	scorepointers,x
   2289  2416		       ca		      dex
   2290  2417		       10 f9		      bpl	initscore
   2291  2419		       a9 01		      lda	#1
   2292  241b		       85 0a		      sta	CTRLPF
   2293  241d		       0d 84 02 	      ora	INTIM
   2294  2420		       85 d6		      sta	rand
   2295  2422
   2296  2422					      ifconst	multisprite
   2297  2422		       20 1f f0 	      jsr	multisprite_setup
   2298  2425					      endif
   2299  2425
   2300  2425				  -	      ifnconst	bankswitch
   2301  2425				  -	      jmp	game
   2302  2425					      else
   2303  2425		       a9 cf		      lda	#>(game-1)
   2304  2427		       48		      pha
   2305  2428		       a9 ff		      lda	#<(game-1)
   2306  242a		       48		      pha
   2307  242b		       48		      pha
   2308  242c		       48		      pha
   2309  242d		       a2 01		      ldx	#1
   2310  242f		       4c eb ff 	      jmp	BS_jsr
   2311  2432					      endif
   2312  2432							; Provided under the CC0 license. See the included LICENSE.txt for details.
   2313  2432
   2314  2432							;standard routines needed for pretty much all games
   2315  2432							; just the random number generator is left - maybe we should remove this asm file altogether?
   2316  2432							; repositioning code and score pointer setup moved to overscan
   2317  2432							; read switches, joysticks now compiler generated (more efficient)
   2318  2432
   2319  2432				   randomize
   2320  2432		       a5 d6		      lda	rand
   2321  2434		       4a		      lsr
   2322  2435				  -	      ifconst	rand16
   2323  2435				  -	      rol	rand16
   2324  2435					      endif
   2325  2435		       90 02		      bcc	noeor
   2326  2437		       49 b4		      eor	#$B4
   2327  2439				   noeor
   2328  2439		       85 d6		      sta	rand
   2329  243b				  -	      ifconst	rand16
   2330  243b				  -	      eor	rand16
   2331  243b					      endif
      0  243b					      RETURN
      1  243b				  -	      ifnconst	bankswitch
      2  243b				  -	      rts
      3  243b					      else
      4  243b		       4c dd ff 	      jmp	BS_return
      5  243e					      endif
   2333  243e							;bB.asm
   2334  243e							; bB.asm file is split here
   2335  243e				  -	      if	(<*) > (<(*+8))
   2336  243e				  -	      repeat	($100-<*)
   2337  243e				  -	      .byte	0
   2338  243e				  -	      repend
   2339  243e					      endif
   2340  243e					      if	(<*) < 90
   2341  243e					      repeat	(90-<*)
   2342  243e		       00		      .byte.b	0
   2341  243e					      repend
   2342  243f		       00		      .byte.b	0
   2341  243f					      repend
   2342  2440		       00		      .byte.b	0
   2341  2440					      repend
   2342  2441		       00		      .byte.b	0
   2341  2441					      repend
   2342  2442		       00		      .byte.b	0
   2341  2442					      repend
   2342  2443		       00		      .byte.b	0
   2341  2443					      repend
   2342  2444		       00		      .byte.b	0
   2341  2444					      repend
   2342  2445		       00		      .byte.b	0
   2341  2445					      repend
   2342  2446		       00		      .byte.b	0
   2341  2446					      repend
   2342  2447		       00		      .byte.b	0
   2341  2447					      repend
   2342  2448		       00		      .byte.b	0
   2341  2448					      repend
   2342  2449		       00		      .byte.b	0
   2341  2449					      repend
   2342  244a		       00		      .byte.b	0
   2341  244a					      repend
   2342  244b		       00		      .byte.b	0
   2341  244b					      repend
   2342  244c		       00		      .byte.b	0
   2341  244c					      repend
   2342  244d		       00		      .byte.b	0
   2341  244d					      repend
   2342  244e		       00		      .byte.b	0
   2341  244e					      repend
   2342  244f		       00		      .byte.b	0
   2341  244f					      repend
   2342  2450		       00		      .byte.b	0
   2341  2450					      repend
   2342  2451		       00		      .byte.b	0
   2341  2451					      repend
   2342  2452		       00		      .byte.b	0
   2341  2452					      repend
   2342  2453		       00		      .byte.b	0
   2341  2453					      repend
   2342  2454		       00		      .byte.b	0
   2341  2454					      repend
   2342  2455		       00		      .byte.b	0
   2341  2455					      repend
   2342  2456		       00		      .byte.b	0
   2341  2456					      repend
   2342  2457		       00		      .byte.b	0
   2341  2457					      repend
   2342  2458		       00		      .byte.b	0
   2341  2458					      repend
   2342  2459		       00		      .byte.b	0
   2343  245a					      repend
   2344  245a					      endif
   2345  245a				   player2then_0
   2346  245a		       00		      .byte.b	0
   2347  245b		       00		      .byte.b	%00000000
   2348  245c		       82		      .byte.b	%10000010
   2349  245d		       44		      .byte.b	%01000100
   2350  245e		       fe		      .byte.b	%11111110
   2351  245f		       fe		      .byte.b	%11111110
   2352  2460		       ba		      .byte.b	%10111010
   2353  2461		       7c		      .byte.b	%01111100
   2354  2462		       82		      .byte.b	%10000010
   2355  2463				  -	      if	(<*) > (<(*+8))
   2356  2463				  -	      repeat	($100-<*)
   2357  2463				  -	      .byte	0
   2358  2463				  -	      repend
   2359  2463					      endif
   2360  2463				  -	      if	(<*) < 90
   2361  2463				  -	      repeat	(90-<*)
   2362  2463				  -	      .byte	0
   2363  2463				  -	      repend
   2364  2463					      endif
   2365  2463				   player4then_0
   2366  2463		       00		      .byte.b	0
   2367  2464		       00		      .byte.b	%00000000
   2368  2465		       28		      .byte.b	%00101000
   2369  2466		       44		      .byte.b	%01000100
   2370  2467		       fe		      .byte.b	%11111110
   2371  2468		       fe		      .byte.b	%11111110
   2372  2469		       ba		      .byte.b	%10111010
   2373  246a		       7c		      .byte.b	%01111100
   2374  246b		       44		      .byte.b	%01000100
   2375  246c				  -	      if	(<*) > (<(*+7))
   2376  246c				  -	      repeat	($100-<*)
   2377  246c				  -	      .byte	0
   2378  246c				  -	      repend
   2379  246c					      endif
   2380  246c				  -	      if	(<*) < 90
   2381  246c				  -	      repeat	(90-<*)
   2382  246c				  -	      .byte	0
   2383  246c				  -	      repend
   2384  246c					      endif
   2385  246c				   playerL042_2
   2386  246c		       00		      .byte.b	%00000000
   2387  246d		       00		      .byte.b	%00000000
   2388  246e		       10		      .byte.b	%00010000
   2389  246f		       20		      .byte.b	%00100000
   2390  2470		       10		      .byte.b	%00010000
   2391  2471		       08		      .byte.b	%00001000
   2392  2472		       10		      .byte.b	%00010000
   2393  2473		       00		      .byte.b	%00000000
   2394  2474				  -	      if	(<*) > (<(*+8))
   2395  2474				  -	      repeat	($100-<*)
   2396  2474				  -	      .byte	0
   2397  2474				  -	      repend
   2398  2474					      endif
   2399  2474				  -	      if	(<*) < 90
   2400  2474				  -	      repeat	(90-<*)
   2401  2474				  -	      .byte	0
   2402  2474				  -	      repend
   2403  2474					      endif
   2404  2474				   player33then_0
   2405  2474		       00		      .byte.b	0
   2406  2475		       00		      .byte.b	%00000000
   2407  2476		       92		      .byte.b	%10010010
   2408  2477		       54		      .byte.b	%01010100
   2409  2478		       00		      .byte.b	%00000000
   2410  2479		       d6		      .byte.b	%11010110
   2411  247a		       00		      .byte.b	%00000000
   2412  247b		       54		      .byte.b	%01010100
   2413  247c		       92		      .byte.b	%10010010
   2414  247d				  -	      if	(<*) > (<(*+8))
   2415  247d				  -	      repeat	($100-<*)
   2416  247d				  -	      .byte	0
   2417  247d				  -	      repend
   2418  247d					      endif
   2419  247d				  -	      if	(<*) < 90
   2420  247d				  -	      repeat	(90-<*)
   2421  247d				  -	      .byte	0
   2422  247d				  -	      repend
   2423  247d					      endif
   2424  247d				   playerL056_0
   2425  247d		       00		      .byte.b	0
   2426  247e		       00		      .byte.b	%00000000
   2427  247f		       82		      .byte.b	%10000010
   2428  2480		       44		      .byte.b	%01000100
   2429  2481		       fe		      .byte.b	%11111110
   2430  2482		       fe		      .byte.b	%11111110
   2431  2483		       ba		      .byte.b	%10111010
   2432  2484		       7c		      .byte.b	%01111100
   2433  2485		       82		      .byte.b	%10000010
   2434  2486				  -	      if	(<*) > (<(*+7))
   2435  2486				  -	      repeat	($100-<*)
   2436  2486				  -	      .byte	0
   2437  2486				  -	      repend
   2438  2486					      endif
   2439  2486				  -	      if	(<*) < 90
   2440  2486				  -	      repeat	(90-<*)
   2441  2486				  -	      .byte	0
   2442  2486				  -	      repend
   2443  2486					      endif
   2444  2486				   playerL059_1
   2445  2486		       fe		      .byte.b	%11111110
   2446  2487		       fe		      .byte.b	%11111110
   2447  2488		       7c		      .byte.b	%01111100
   2448  2489		       10		      .byte.b	%00010000
   2449  248a		       00		      .byte.b	%00000000
   2450  248b		       00		      .byte.b	%00000000
   2451  248c		       00		      .byte.b	%00000000
   2452  248d		       00		      .byte.b	%00000000
   2453  248e				  -	      if	(<*) > (<(*+7))
   2454  248e				  -	      repeat	($100-<*)
   2455  248e				  -	      .byte	0
   2456  248e				  -	      repend
   2457  248e					      endif
   2458  248e				  -	      if	(<*) < 90
   2459  248e				  -	      repeat	(90-<*)
   2460  248e				  -	      .byte	0
   2461  248e				  -	      repend
   2462  248e					      endif
   2463  248e				   playerL065_3
   2464  248e		       00		      .byte.b	%00000000
   2465  248f		       00		      .byte.b	%00000000
   2466  2490		       00		      .byte.b	%00000000
   2467  2491		       10		      .byte.b	%00010000
   2468  2492		       10		      .byte.b	%00010000
   2469  2493		       00		      .byte.b	%00000000
   2470  2494		       00		      .byte.b	%00000000
   2471  2495		       00		      .byte.b	%00000000
   2472  2496				  -	      if	(<*) > (<(*+24))
   2473  2496				  -	      repeat	($100-<*)
   2474  2496				  -	      .byte	0
   2475  2496				  -	      repend
   2476  2496					      endif
   2477  2496				  -	      if	(<*) < 90
   2478  2496				  -	      repeat	(90-<*)
   2479  2496				  -	      .byte	0
   2480  2496				  -	      repend
   2481  2496					      endif
   2482  2496				   playerL073_2
   2483  2496		       00		      .byte.b	%00000000
   2484  2497		       00		      .byte.b	%00000000
   2485  2498		       00		      .byte.b	%00000000
   2486  2499		       00		      .byte.b	%00000000
   2487  249a		       00		      .byte.b	%00000000
   2488  249b		       f8		      .byte.b	%11111000
   2489  249c		       80		      .byte.b	%10000000
   2490  249d		       c0		      .byte.b	%11000000
   2491  249e		       80		      .byte.b	%10000000
   2492  249f		       f8		      .byte.b	%11111000
   2493  24a0		       00		      .byte.b	%00000000
   2494  24a1		       88		      .byte.b	%10001000
   2495  24a2		       88		      .byte.b	%10001000
   2496  24a3		       a8		      .byte.b	%10101000
   2497  24a4		       f8		      .byte.b	%11111000
   2498  24a5		       00		      .byte.b	%00000000
   2499  24a6		       88		      .byte.b	%10001000
   2500  24a7		       f8		      .byte.b	%11111000
   2501  24a8		       88		      .byte.b	%10001000
   2502  24a9		       f8		      .byte.b	%11111000
   2503  24aa		       00		      .byte.b	%00000000
   2504  24ab		       f8		      .byte.b	%11111000
   2505  24ac		       88		      .byte.b	%10001000
   2506  24ad		       80		      .byte.b	%10000000
   2507  24ae		       f8		      .byte.b	%11111000
   2508  24af				  -	      if	(<*) > (<(*+24))
   2509  24af				  -	      repeat	($100-<*)
   2510  24af				  -	      .byte	0
   2511  24af				  -	      repend
   2512  24af					      endif
   2513  24af				  -	      if	(<*) < 90
   2514  24af				  -	      repeat	(90-<*)
   2515  24af				  -	      .byte	0
   2516  24af				  -	      repend
   2517  24af					      endif
   2518  24af				   playerL074_3
   2519  24af		       00		      .byte.b	%00000000
   2520  24b0		       00		      .byte.b	%00000000
   2521  24b1		       00		      .byte.b	%00000000
   2522  24b2		       00		      .byte.b	%00000000
   2523  24b3		       00		      .byte.b	%00000000
   2524  24b4		       88		      .byte.b	%10001000
   2525  24b5		       f0		      .byte.b	%11110000
   2526  24b6		       88		      .byte.b	%10001000
   2527  24b7		       f8		      .byte.b	%11111000
   2528  24b8		       00		      .byte.b	%00000000
   2529  24b9		       f8		      .byte.b	%11111000
   2530  24ba		       80		      .byte.b	%10000000
   2531  24bb		       c0		      .byte.b	%11000000
   2532  24bc		       80		      .byte.b	%10000000
   2533  24bd		       f8		      .byte.b	%11111000
   2534  24be		       00		      .byte.b	%00000000
   2535  24bf		       20		      .byte.b	%00100000
   2536  24c0		       50		      .byte.b	%01010000
   2537  24c1		       88		      .byte.b	%10001000
   2538  24c2		       88		      .byte.b	%10001000
   2539  24c3		       00		      .byte.b	%00000000
   2540  24c4		       f8		      .byte.b	%11111000
   2541  24c5		       88		      .byte.b	%10001000
   2542  24c6		       88		      .byte.b	%10001000
   2543  24c7		       f8		      .byte.b	%11111000
   2544  24c8					      if	ECHOFIRST
      2732 bytes of ROM space left in bank 2
   2545  24c8					      echo	"    ",[(scoretable - *)]d , "bytes of ROM space left in bank 2")
   2546  24c8					      endif
   2547  24c8		       00 01	   ECHOFIRST  =	1
   2548  24c8
   2549  24c8
   2550  24c8							; Provided under the CC0 license. See the included LICENSE.txt for details.
   2551  24c8
   2552  24c8							; feel free to modify the score graphics - just keep each digit 8 high
   2553  24c8							; and keep the conditional compilation stuff intact
   2554  24c8				  -	      ifconst	ROM2k
   2555  24c8				  -	      ORG	$F7AC-8
   2556  24c8					      else
   2557  24c8					      ifconst	bankswitch
   2558  24c8					      if	bankswitch == 8
   2559  2f74					      ORG	$2F94-bscode_length
   2560  2f74					      RORG	$FF94-bscode_length
   2561  2f74					      endif
   2562  2f74				  -	      if	bankswitch == 16
   2563  2f74				  -	      ORG	$4F94-bscode_length
   2564  2f74				  -	      RORG	$FF94-bscode_length
   2565  2f74					      endif
   2566  2f74				  -	      if	bankswitch == 32
   2567  2f74				  -	      ORG	$8F94-bscode_length
   2568  2f74				  -	      RORG	$FF94-bscode_length
   2569  2f74					      endif
   2570  2f74				  -	      if	bankswitch == 64
   2571  2f74				  -	      ORG	$10F80-bscode_length
   2572  2f74				  -	      RORG	$1FF80-bscode_length
   2573  2f74					      endif
   2574  2f74				  -	      else
   2575  2f74				  -	      ORG	$FF9C
   2576  2f74					      endif
   2577  2f74					      endif
   2578  2f74
   2579  2f74							; font equates
   2580  2f74		       00 01	   .21stcentury =	1
   2581  2f74		       00 02	   alarmclock =	2
   2582  2f74		       00 03	   handwritten =	3
   2583  2f74		       00 04	   interrupted =	4
   2584  2f74		       00 05	   retroputer =	5
   2585  2f74		       00 06	   whimsey    =	6
   2586  2f74		       00 07	   tiny       =	7
   2587  2f74		       00 08	   hex	      =	8
   2588  2f74
   2589  2f74				  -	      ifconst	font
   2590  2f74				  -	      if	font == hex
   2591  2f74				  -	      ORG	. - 48
   2592  2f74				  -	      endif
   2593  2f74					      endif
   2594  2f74
   2595  2f74				   scoretable
   2596  2f74
   2597  2f74				  -	      ifconst	font
   2598  2f74				  -	      if	font == .21stcentury
   2599  2f74				  -	      include	"score_graphics.asm.21stcentury"
   2600  2f74				  -	      endif
   2601  2f74				  -	      if	font == alarmclock
   2602  2f74				  -	      include	"score_graphics.asm.alarmclock"
   2603  2f74				  -	      endif
   2604  2f74				  -	      if	font == handwritten
   2605  2f74				  -	      include	"score_graphics.asm.handwritten"
   2606  2f74				  -	      endif
   2607  2f74				  -	      if	font == interrupted
   2608  2f74				  -	      include	"score_graphics.asm.interrupted"
   2609  2f74				  -	      endif
   2610  2f74				  -	      if	font == retroputer
   2611  2f74				  -	      include	"score_graphics.asm.retroputer"
   2612  2f74				  -	      endif
   2613  2f74				  -	      if	font == whimsey
   2614  2f74				  -	      include	"score_graphics.asm.whimsey"
   2615  2f74				  -	      endif
   2616  2f74				  -	      if	font == tiny
   2617  2f74				  -	      include	"score_graphics.asm.tiny"
   2618  2f74				  -	      endif
   2619  2f74				  -	      if	font == hex
   2620  2f74				  -	      include	"score_graphics.asm.hex"
   2621  2f74				  -	      endif
   2622  2f74					      else		; default font
   2623  2f74
   2624  2f74		       3c		      .byte.b	%00111100
   2625  2f75		       66		      .byte.b	%01100110
   2626  2f76		       66		      .byte.b	%01100110
   2627  2f77		       66		      .byte.b	%01100110
   2628  2f78		       66		      .byte.b	%01100110
   2629  2f79		       66		      .byte.b	%01100110
   2630  2f7a		       66		      .byte.b	%01100110
   2631  2f7b		       3c		      .byte.b	%00111100
   2632  2f7c
   2633  2f7c		       7e		      .byte.b	%01111110
   2634  2f7d		       18		      .byte.b	%00011000
   2635  2f7e		       18		      .byte.b	%00011000
   2636  2f7f		       18		      .byte.b	%00011000
   2637  2f80		       18		      .byte.b	%00011000
   2638  2f81		       38		      .byte.b	%00111000
   2639  2f82		       18		      .byte.b	%00011000
   2640  2f83		       08		      .byte.b	%00001000
   2641  2f84
   2642  2f84		       7e		      .byte.b	%01111110
   2643  2f85		       60		      .byte.b	%01100000
   2644  2f86		       60		      .byte.b	%01100000
   2645  2f87		       3c		      .byte.b	%00111100
   2646  2f88		       06		      .byte.b	%00000110
   2647  2f89		       06		      .byte.b	%00000110
   2648  2f8a		       46		      .byte.b	%01000110
   2649  2f8b		       3c		      .byte.b	%00111100
   2650  2f8c
   2651  2f8c		       3c		      .byte.b	%00111100
   2652  2f8d		       46		      .byte.b	%01000110
   2653  2f8e		       06		      .byte.b	%00000110
   2654  2f8f		       06		      .byte.b	%00000110
   2655  2f90		       1c		      .byte.b	%00011100
   2656  2f91		       06		      .byte.b	%00000110
   2657  2f92		       46		      .byte.b	%01000110
   2658  2f93		       3c		      .byte.b	%00111100
   2659  2f94
   2660  2f94		       0c		      .byte.b	%00001100
   2661  2f95		       0c		      .byte.b	%00001100
   2662  2f96		       7e		      .byte.b	%01111110
   2663  2f97		       4c		      .byte.b	%01001100
   2664  2f98		       4c		      .byte.b	%01001100
   2665  2f99		       2c		      .byte.b	%00101100
   2666  2f9a		       1c		      .byte.b	%00011100
   2667  2f9b		       0c		      .byte.b	%00001100
   2668  2f9c
   2669  2f9c		       3c		      .byte.b	%00111100
   2670  2f9d		       46		      .byte.b	%01000110
   2671  2f9e		       06		      .byte.b	%00000110
   2672  2f9f		       06		      .byte.b	%00000110
   2673  2fa0		       3c		      .byte.b	%00111100
   2674  2fa1		       60		      .byte.b	%01100000
   2675  2fa2		       60		      .byte.b	%01100000
   2676  2fa3		       7e		      .byte.b	%01111110
   2677  2fa4
   2678  2fa4		       3c		      .byte.b	%00111100
   2679  2fa5		       66		      .byte.b	%01100110
   2680  2fa6		       66		      .byte.b	%01100110
   2681  2fa7		       66		      .byte.b	%01100110
   2682  2fa8		       7c		      .byte.b	%01111100
   2683  2fa9		       60		      .byte.b	%01100000
   2684  2faa		       62		      .byte.b	%01100010
   2685  2fab		       3c		      .byte.b	%00111100
   2686  2fac
   2687  2fac		       30		      .byte.b	%00110000
   2688  2fad		       30		      .byte.b	%00110000
   2689  2fae		       30		      .byte.b	%00110000
   2690  2faf		       18		      .byte.b	%00011000
   2691  2fb0		       0c		      .byte.b	%00001100
   2692  2fb1		       06		      .byte.b	%00000110
   2693  2fb2		       42		      .byte.b	%01000010
   2694  2fb3		       3e		      .byte.b	%00111110
   2695  2fb4
   2696  2fb4		       3c		      .byte.b	%00111100
   2697  2fb5		       66		      .byte.b	%01100110
   2698  2fb6		       66		      .byte.b	%01100110
   2699  2fb7		       66		      .byte.b	%01100110
   2700  2fb8		       3c		      .byte.b	%00111100
   2701  2fb9		       66		      .byte.b	%01100110
   2702  2fba		       66		      .byte.b	%01100110
   2703  2fbb		       3c		      .byte.b	%00111100
   2704  2fbc
   2705  2fbc		       3c		      .byte.b	%00111100
   2706  2fbd		       46		      .byte.b	%01000110
   2707  2fbe		       06		      .byte.b	%00000110
   2708  2fbf		       3e		      .byte.b	%00111110
   2709  2fc0		       66		      .byte.b	%01100110
   2710  2fc1		       66		      .byte.b	%01100110
   2711  2fc2		       66		      .byte.b	%01100110
   2712  2fc3		       3c		      .byte.b	%00111100
   2713  2fc4
   2714  2fc4					      ifnconst	DPC_kernel_options
   2715  2fc4
   2716  2fc4		       00		      .byte.b	%00000000
   2717  2fc5		       00		      .byte.b	%00000000
   2718  2fc6		       00		      .byte.b	%00000000
   2719  2fc7		       00		      .byte.b	%00000000
   2720  2fc8		       00		      .byte.b	%00000000
   2721  2fc9		       00		      .byte.b	%00000000
   2722  2fca		       00		      .byte.b	%00000000
   2723  2fcb		       00		      .byte.b	%00000000
   2724  2fcc
   2725  2fcc					      endif
   2726  2fcc
   2727  2fcc					      endif
   2728  2fcc
   2729  2fcc				  -	      ifconst	ROM2k
   2730  2fcc				  -	      ORG	$F7FC
   2731  2fcc					      else
   2732  2fcc					      ifconst	bankswitch
   2733  2fcc					      if	bankswitch == 8
   2734  2fd4					      ORG	$2FF4-bscode_length
   2735  2fd4					      RORG	$FFF4-bscode_length
   2736  2fd4					      endif
   2737  2fd4				  -	      if	bankswitch == 16
   2738  2fd4				  -	      ORG	$4FF4-bscode_length
   2739  2fd4				  -	      RORG	$FFF4-bscode_length
   2740  2fd4					      endif
   2741  2fd4				  -	      if	bankswitch == 32
   2742  2fd4				  -	      ORG	$8FF4-bscode_length
   2743  2fd4				  -	      RORG	$FFF4-bscode_length
   2744  2fd4					      endif
   2745  2fd4				  -	      if	bankswitch == 64
   2746  2fd4				  -	      ORG	$10FE0-bscode_length
   2747  2fd4				  -	      RORG	$1FFE0-bscode_length
   2748  2fd4					      endif
   2749  2fd4				  -	      else
   2750  2fd4				  -	      ORG	$FFFC
   2751  2fd4					      endif
   2752  2fd4					      endif
   2753  2fd4							; Provided under the CC0 license. See the included LICENSE.txt for details.
   2754  2fd4
   2755  2fd4							; every bank has this stuff at the same place
   2756  2fd4							; this code can switch to/from any bank at any entry point
   2757  2fd4							; and can preserve register values
   2758  2fd4							; note: lines not starting with a space are not placed in all banks
   2759  2fd4							;
   2760  2fd4							; line below tells the compiler how long this is - do not remove
   2761  2fd4							;size=32
   2762  2fd4
   2763  2fd4				   begin_bscode
   2764  2fd4		       a2 ff		      ldx	#$ff
   2765  2fd6				  -	      ifconst	FASTFETCH	; using DPC+
   2766  2fd6				  -	      stx	FASTFETCH
   2767  2fd6					      endif
   2768  2fd6		       9a		      txs
   2769  2fd7				  -	      if	bankswitch == 64
   2770  2fd7				  -	      lda	#(((>(start-1)) & $0F) | $F0)
   2771  2fd7					      else
   2772  2fd7		       a9 f3		      lda	#>(start-1)
   2773  2fd9					      endif
   2774  2fd9		       48		      pha
   2775  2fda		       a9 f4		      lda	#<(start-1)
   2776  2fdc		       48		      pha
   2777  2fdd
   2778  2fdd				   BS_return
   2779  2fdd		       48		      pha
   2780  2fde		       8a		      txa
   2781  2fdf		       48		      pha
   2782  2fe0		       ba		      tsx
   2783  2fe1
   2784  2fe1					      if	bankswitch != 64
   2785  2fe1		       b5 04		      lda	4,x	; get high byte of return address
   2786  2fe3
   2787  2fe3		       2a		      rol
   2788  2fe4		       2a		      rol
   2789  2fe5		       2a		      rol
   2790  2fe6		       2a		      rol
   2791  2fe7		       29 01		      and	#bs_mask	;1 3 or 7 for F8/F6/F4
   2792  2fe9		       aa		      tax
   2793  2fea		       e8		      inx
   2794  2feb				  -	      else
   2795  2feb				  -	      lda	4,x	; get high byte of return address
   2796  2feb				  -	      tay
   2797  2feb				  -	      ora	#$10	; change our bank nibble into a valid rom mirror
   2798  2feb				  -	      sta	4,x
   2799  2feb				  -	      tya
   2800  2feb				  -	      lsr
   2801  2feb				  -	      lsr
   2802  2feb				  -	      lsr
   2803  2feb				  -	      lsr
   2804  2feb				  -	      tax
   2805  2feb				  -	      inx
   2806  2feb					      endif
   2807  2feb
   2808  2feb				   BS_jsr
   2809  2feb		       bd f7 1f 	      lda	bankswitch_hotspot-1,x
   2810  2fee		       68		      pla
   2811  2fef		       aa		      tax
   2812  2ff0		       68		      pla
   2813  2ff1		       60		      rts
   2814  2ff2				  -	      if	((* & $1FFF) > ((bankswitch_hotspot & $1FFF) - 1))
   2815  2ff2				  -	      echo	"WARNING: size parameter in banksw.asm too small - the program probably will not work."
   2816  2ff2				  -	      echo	"Change to",[(*-begin_bscode+1)&$FF]d,"and try again."
   2817  2ff2					      endif
   2818  2ff2							; Provided under the CC0 license. See the included LICENSE.txt for details.
   2819  2ff2
   2820  2ff2					      ifconst	bankswitch
   2821  2ff2					      if	bankswitch == 8
   2822  2ffc					      ORG	$2FFC
   2823  2ffc					      RORG	$FFFC
   2824  2ffc					      endif
   2825  2ffc				  -	      if	bankswitch == 16
   2826  2ffc				  -	      ORG	$4FFC
   2827  2ffc				  -	      RORG	$FFFC
   2828  2ffc					      endif
   2829  2ffc				  -	      if	bankswitch == 32
   2830  2ffc				  -	      ORG	$8FFC
   2831  2ffc				  -	      RORG	$FFFC
   2832  2ffc					      endif
   2833  2ffc				  -	      if	bankswitch == 64
   2834  2ffc				  -	      ORG	$10FF0
   2835  2ffc				  -	      RORG	$1FFF0
   2836  2ffc				  -	      lda	$ffe0	; we use wasted space to assist stella with EF format auto-detection
   2837  2ffc				  -	      ORG	$10FF8
   2838  2ffc				  -	      RORG	$1FFF8
   2839  2ffc				  -	      ifconst	superchip
   2840  2ffc				  -	      .byte	"E","F","S","C"
   2841  2ffc				  -	      else
   2842  2ffc				  -	      .byte	"E","F","E","F"
   2843  2ffc				  -	      endif
   2844  2ffc				  -	      ORG	$10FFC
   2845  2ffc				  -	      RORG	$1FFFC
   2846  2ffc					      endif
   2847  2ffc				  -	      else
   2848  2ffc				  -	      ifconst	ROM2k
   2849  2ffc				  -	      ORG	$F7FC
   2850  2ffc				  -	      else
   2851  2ffc				  -	      ORG	$FFFC
   2852  2ffc				  -	      endif
   2853  2ffc					      endif
   2854  2ffc		       f5 f3		      .word.w	(start & $ffff)
   2855  2ffe		       f5 f3		      .word.w	(start & $ffff)
